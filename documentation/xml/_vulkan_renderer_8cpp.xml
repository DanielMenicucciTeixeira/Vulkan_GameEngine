<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_vulkan_renderer_8cpp" kind="file" language="C++">
    <compoundname>VulkanRenderer.cpp</compoundname>
    <includes refid="_vulkan_renderer_8h" local="yes">VulkanRenderer.h</includes>
    <includes local="yes">SDL/VGE_SDLManager.h</includes>
    <includes refid="_f_vector3_8h" local="yes">Math/FVector3.h</includes>
    <includes refid="_f_vector4_8h" local="yes">Math/FVector4.h</includes>
    <includes refid="_f_matrix_8h" local="yes">Math/FMatrix.h</includes>
    <includes local="no">vulkan/vulkan.h</includes>
    <includes local="no">SDL.h</includes>
    <includes local="no">SDL_vulkan.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">set</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">fstream</includes>
    <includes local="no">chrono</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">stb_image.h</includes>
    <includes local="no">tiny_obj_loader.h</includes>
    <incdepgraph>
      <node id="13">
        <label>Math/FMatrix.h</label>
        <link refid="_f_matrix_8h"/>
      </node>
      <node id="11">
        <label>Math/FMatrix4.h</label>
        <link refid="_f_matrix4_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Math/FVector3.h</label>
        <link refid="_f_vector3_8h"/>
      </node>
      <node id="10">
        <label>Math/FVector4.h</label>
        <link refid="_f_vector4_8h"/>
      </node>
      <node id="3">
        <label>Renderer.h</label>
        <link refid="_renderer_8h"/>
      </node>
      <node id="1">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanRenderer.cpp</label>
        <link refid="_vulkan_renderer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>VulkanRenderer.h</label>
        <link refid="_vulkan_renderer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>SDL.h</label>
      </node>
      <node id="12">
        <label>SDL/VGE_SDLManager.h</label>
      </node>
      <node id="16">
        <label>SDL_vulkan.h</label>
      </node>
      <node id="18">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>array</label>
      </node>
      <node id="20">
        <label>chrono</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>optional</label>
      </node>
      <node id="5">
        <label>set</label>
      </node>
      <node id="22">
        <label>stb_image.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="23">
        <label>tiny_obj_loader.h</label>
      </node>
      <node id="21">
        <label>unordered_map</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="14">
        <label>vulkan/vulkan.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_vulkan_renderer_8cpp_1a18372412ad2fc3ce1e3240b3cf0efe78" prot="public" static="no">
        <name>STB_IMAGE_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanRenderer.cpp" line="18" column="9" bodyfile="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanRenderer.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_vulkan_renderer_8cpp_1af14fac7fbc250522a78849d58d5b0811" prot="public" static="no">
        <name>TINYOBJLOADER_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanRenderer.cpp" line="21" column="9" bodyfile="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanRenderer.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_vulkan_renderer_8cpp_1ac1579dcac95da6b7524c9732ebe29c37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VKAPI_ATTR VkBool32 VKAPI_CALL</type>
        <definition>static VKAPI_ATTR VkBool32 VKAPI_CALL debugCallback</definition>
        <argsstring>(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageType, const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData, void *pUserData)</argsstring>
        <name>debugCallback</name>
        <param>
          <type>VkDebugUtilsMessageSeverityFlagBitsEXT</type>
          <declname>messageSeverity</declname>
        </param>
        <param>
          <type>VkDebugUtilsMessageTypeFlagsEXT</type>
          <declname>messageType</declname>
        </param>
        <param>
          <type>const VkDebugUtilsMessengerCallbackDataEXT *</type>
          <declname>pCallbackData</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pUserData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanRenderer.cpp" line="334" column="39" bodyfile="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanRenderer.cpp" bodystart="334" bodyend="338"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_vulkan_renderer_8h" kindref="compound">VulkanRenderer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SDL/VGE_SDLManager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_f_vector3_8h" kindref="compound">Math/FVector3.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_f_vector4_8h" kindref="compound">Math/FVector4.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_f_matrix_8h" kindref="compound">Math/FMatrix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vulkan/vulkan.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;SDL_vulkan.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="_vulkan_renderer_8cpp_1a18372412ad2fc3ce1e3240b3cf0efe78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IMAGE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stb_image.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="_vulkan_renderer_8cpp_1af14fac7fbc250522a78849d58d5b0811" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINYOBJLOADER_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tiny_obj_loader.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_vulkan_renderer_1abc8ed9b20063867618e2175a8f74933d" refkind="member"><highlight class="normal"><ref refid="class_vulkan_renderer_1abc8ed9b20063867618e2175a8f74933d" kindref="member">VulkanRenderer::VulkanRenderer</ref>(VGE_SDLManager*<sp/>sdlManager)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdlManager)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a3526e95262e033f98a14dc57f334fc93" kindref="member">SDLManager</ref><sp/>=<sp/>sdlManager;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a3526e95262e033f98a14dc57f334fc93" kindref="member">SDLManager</ref>-&gt;SetRenderer(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="class_vulkan_renderer_1a0d816e99ef4265a38912e5e5352402f2" refkind="member"><highlight class="normal"><ref refid="class_vulkan_renderer_1a0d816e99ef4265a38912e5e5352402f2" kindref="member">VulkanRenderer::~VulkanRenderer</ref>()</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_vulkan_renderer_1ad131953f01e0a81804257172d481f7ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1ad131953f01e0a81804257172d481f7ce" kindref="member">VulkanRenderer::Run</ref>()</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aa43c22ff47894a33ae1922c4fdc51058" kindref="member">Initialize</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a86f3a92b02fdb782bff78ec655602dca" kindref="member">MainLoop</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a90e060690cf62cdbf58ae02dfab40983" kindref="member">CleanUp</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="class_vulkan_renderer_1aa43c22ff47894a33ae1922c4fdc51058" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1aa43c22ff47894a33ae1922c4fdc51058" kindref="member">VulkanRenderer::Initialize</ref>()</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a8fad8533b5d1c72cf67c99c04315aa5a" kindref="member">EnableValidationLayers</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a8fad8533b5d1c72cf67c99c04315aa5a" kindref="member">EnableValidationLayers</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a03b3efe9367a335c51f4e8ccdf1d68f2" kindref="member">DeviceExtensions</ref><sp/>=</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_KHR_SWAPCHAIN_EXTENSION_NAME</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a3526e95262e033f98a14dc57f334fc93" kindref="member">SDLManager</ref>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a8a1079dfe304174c5b11c959bd60eb22" kindref="member">SetWindow</ref>(<ref refid="class_vulkan_renderer_1a3526e95262e033f98a14dc57f334fc93" kindref="member">SDLManager</ref>-&gt;GetWindow());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aaf395b798d5db7288a000c61ad34ac8c" kindref="member">CreateInstance</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a8fad8533b5d1c72cf67c99c04315aa5a" kindref="member">EnableValidationLayers</ref>)<sp/><ref refid="class_vulkan_renderer_1aa7b8ac951fd9e206f134a71b9fb57c50" kindref="member">SetUpDebugMessenger</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aa6a2a86b91a0b9a8f4b799e7f512e39d" kindref="member">CreateSurface</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a4f06ca15d6bf0f3f9bc136246a282d8d" kindref="member">PickPhysicalDevice</ref>();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a44d431822480747f4caeae2fc8c4ebef" kindref="member">CreateLogicalDevice</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aeb6c4d150a18207fdef4ee0ecfe1c7e2" kindref="member">CreateSwapChain</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a72559bcf1389dced82df0a5aab5b10cf" kindref="member">CreateImageViews</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a6256bdc4a670eb2425a6e28962f13da4" kindref="member">CreateRenderPass</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a6e87b2d78d3b388f0d499845246eea81" kindref="member">CreateDescriptorSetLayout</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a4e191872c39fb793536b3a635d08f0db" kindref="member">CreateGraphicsPipeline</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a57ad62086fe479f168fa1ffd6b58e4d6" kindref="member">CreateCommandPool</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a660660e9dcf36dcadd1e338c078a4a3e" kindref="member">CreateDepthResources</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aa019f81dedc6a1dbad21e83f7f7e40e4" kindref="member">CreateFramebuffers</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a591f0b2d09d734586500903ff59ade9c" kindref="member">CreateTextureImage</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aee283834978625f9b9c69bf2fb72aa4e" kindref="member">CreateTextureImageView</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a5e1fb50c654f1cee24c7786b939dc8dd" kindref="member">CreateTextureSampler</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1acee28fbd6d1c75f49744e9b526db48d6" kindref="member">LoadModel</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a9db8136d623dfe2387498b8e64084afc" kindref="member">CreateVertexBuffers</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a40a4311d864f1caab3cfc02617263564" kindref="member">CreateIndexBuffer</ref>();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a42650894ca08c0d2491c612ef90dabca" kindref="member">CreateUniformBuffers</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1abb3941e44bfd564b176afed482cbac38" kindref="member">CreateDescriptorPool</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a83aecfc9db0274ac1b4f997d2c91c530" kindref="member">CreateDescriptorSets</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a2b2ae7f89d20bb03007c5e8cba54450c" kindref="member">CreateCommandBuffers</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1ae7de81fb196883f599da5c830985fbac" kindref="member">CreateSyncObjects</ref>();<sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="class_vulkan_renderer_1a86f3a92b02fdb782bff78ec655602dca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a86f3a92b02fdb782bff78ec655602dca" kindref="member">VulkanRenderer::MainLoop</ref>()</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a3526e95262e033f98a14dc57f334fc93" kindref="member">SDLManager</ref>-&gt;GetEvent().type<sp/>!=<sp/>SDL_QUIT)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a0a3e46121f1fe3ef584bd4c3ab59962e" kindref="member">Render</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDeviceWaitIdle(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="class_vulkan_renderer_1a90e060690cf62cdbf58ae02dfab40983" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a90e060690cf62cdbf58ae02dfab40983" kindref="member">VulkanRenderer::CleanUp</ref>()</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a1c56d565844ab62f6da069ccceaff973" kindref="member">CleanUpSwapChain</ref>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySampler(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1ad4cd8fb0a2dcaeaf9e5fba93c5a34209" kindref="member">TextureSampler</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImageView(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a55dedbbb6f2836d4c2b09464ddbda1d5" kindref="member">TextureImageView</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImage(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a7e826fe4dc5febcf0417d5a477b162d3" kindref="member">TextureImage</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a1c6a5eb4cb7bfc2dd0b5039995719331" kindref="member">TextureImageMemory</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>semaphore<sp/>:<sp/><ref refid="class_vulkan_renderer_1a093538346155b7d762565f55306b8398" kindref="member">RenderFinishedSemaphores</ref>)<sp/>vkDestroySemaphore(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>semaphore,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>semaphore<sp/>:<sp/><ref refid="class_vulkan_renderer_1a68163a3cac5d1ecb79533f04c0516a2a" kindref="member">ImageAvailableSemaphores</ref>)<sp/>vkDestroySemaphore(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>semaphore,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fence<sp/>:<sp/><ref refid="class_vulkan_renderer_1a6aa0458a0e1e89e7a65ba8897defdea4" kindref="member">InFlightFences</ref>)<sp/>vkDestroyFence(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>fence,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyCommandPool(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a89485667c8f0edc91cbc1db315ff5824" kindref="member">CommandPool</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDescriptorSetLayout(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a5dd7349516665b3299a99191698d96a1" kindref="member">DescriptorSetLayout</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyBuffer(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1aa28b87ded901f8164fa186baa9550150" kindref="member">IndexBuffer</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a5d551006f6fc0b9eb86805545391a96d" kindref="member">IndexBufferMemory</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyBuffer(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1ae491011283a9545e5f848cfa012663fa" kindref="member">VertexBuffer</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a793f6480c6c70f22e530064061efab2e" kindref="member">VertexBufferMemory</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDevice(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a8fad8533b5d1c72cf67c99c04315aa5a" kindref="member">EnableValidationLayers</ref>)<sp/><ref refid="class_vulkan_renderer_1a41457a1df4ca7de65af73ecccb3d256b" kindref="member">DestroyDebugUtilsMessengerEXT</ref>(<ref refid="class_vulkan_renderer_1a9f1bd036eebb9bd2d96e8cc8512d591b" kindref="member">Instance</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySurfaceKHR(<ref refid="class_vulkan_renderer_1a9f1bd036eebb9bd2d96e8cc8512d591b" kindref="member">Instance</ref>,<sp/><ref refid="class_vulkan_renderer_1a58313e6f2324d8d8fa7ae5696300fa48" kindref="member">Surface</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyInstance(<ref refid="class_vulkan_renderer_1a9f1bd036eebb9bd2d96e8cc8512d591b" kindref="member">Instance</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="class_vulkan_renderer_1a53099b00d830344d152876872f5c67c1" refkind="member"><highlight class="normal">SDL_Window*<sp/><ref refid="class_vulkan_renderer_1a53099b00d830344d152876872f5c67c1" kindref="member">VulkanRenderer::CreateWindow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>windowName,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>windowSizeX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>windowSizeY,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>windowPositionX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>windowPositionY)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_vulkan_renderer_1aaf395b798d5db7288a000c61ad34ac8c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1aaf395b798d5db7288a000c61ad34ac8c" kindref="member">VulkanRenderer::CreateInstance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>applicationName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>engineName</highlight><highlight class="comment">/*,<sp/>int<sp/>appVersion[3],<sp/>int<sp/>engineVersion[3],<sp/>int<sp/>apiVersion[3]*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a8fad8533b5d1c72cf67c99c04315aa5a" kindref="member">EnableValidationLayers</ref><sp/>&amp;&amp;<sp/>!<ref refid="class_vulkan_renderer_1ae43b96ed1050e49ede7bee0e4f5bc4b8" kindref="member">CheckValidationLayerSupport</ref>())</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;validation<sp/>layers<sp/>requested,<sp/>but<sp/>not<sp/>available!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>VkApplicationInfo<sp/>appInfo{};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>appInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_APPLICATION_INFO;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>appInfo.pApplicationName<sp/>=<sp/>applicationName;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>appInfo.applicationVersion<sp/>=<sp/>VK_MAKE_VERSION(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>appInfo.pEngineName<sp/>=<sp/>engineName;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>appInfo.engineVersion<sp/>=<sp/>VK_MAKE_VERSION(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>appInfo.apiVersion<sp/>=<sp/>VK_API_VERSION_1_2;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>VkInstanceCreateInfo<sp/>createInfo{};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.pApplicationInfo<sp/>=<sp/>&amp;appInfo;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>char*&gt;<sp/>sdlExtensions;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a3526e95262e033f98a14dc57f334fc93" kindref="member">SDLManager</ref>-&gt;GetVulkanExtensions(sdlExtensions);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>sdlExtensions.push_back(VK_EXT_DEBUG_UTILS_EXTENSION_NAME);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.enabledExtensionCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sdlExtensions.size());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.ppEnabledExtensionNames<sp/>=<sp/>sdlExtensions.data();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDebugUtilsMessengerCreateInfoEXT<sp/>debugCreateInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a8fad8533b5d1c72cf67c99c04315aa5a" kindref="member">EnableValidationLayers</ref>)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a8000d76f00321651fd52f6a76a2b2737" kindref="member">PopulateDebugMessengerCreateInfo</ref>(debugCreateInfo);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.pNext<sp/>=<sp/>(VkDebugUtilsMessengerCreateInfoEXT*)&amp;debugCreateInfo;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.enabledLayerCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1ad4f717f4a2c16fc6232ac51a72242678" kindref="member">ValidationLayerNames</ref>.size());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.ppEnabledLayerNames<sp/>=<sp/><ref refid="class_vulkan_renderer_1ad4f717f4a2c16fc6232ac51a72242678" kindref="member">ValidationLayerNames</ref>.data();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.enabledLayerCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.pNext<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateInstance(&amp;createInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a9f1bd036eebb9bd2d96e8cc8512d591b" kindref="member">Instance</ref>)<sp/>!=<sp/>VK_SUCCESS)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>instance!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="class_vulkan_renderer_1a4f06ca15d6bf0f3f9bc136246a282d8d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a4f06ca15d6bf0f3f9bc136246a282d8d" kindref="member">VulkanRenderer::PickPhysicalDevice</ref>()</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref><sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>deviceCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>vkEnumeratePhysicalDevices(<ref refid="class_vulkan_renderer_1a9f1bd036eebb9bd2d96e8cc8512d591b" kindref="member">Instance</ref>,<sp/>&amp;deviceCount,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceCount<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>GPUs<sp/>with<sp/>Vulkan<sp/>support!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkPhysicalDevice&gt;<sp/>devices(deviceCount);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>vkEnumeratePhysicalDevices(<ref refid="class_vulkan_renderer_1a9f1bd036eebb9bd2d96e8cc8512d591b" kindref="member">Instance</ref>,<sp/>&amp;deviceCount,<sp/>devices.data());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>device<sp/>:<sp/>devices)<sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a5a39a018a7efa1390e7f5aa79e059991" kindref="member">IsPhysicalDeviceSuitable</ref>(device))<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref><sp/>=<sp/>device;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref><sp/>==<sp/>VK_NULL_HANDLE)<sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>a<sp/>suitable<sp/>GPU!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="class_vulkan_renderer_1a5a39a018a7efa1390e7f5aa79e059991" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a5a39a018a7efa1390e7f5aa79e059991" kindref="member">VulkanRenderer::IsPhysicalDeviceSuitable</ref>(VkPhysicalDevice_T*<sp/>device)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDeviceProperties<sp/>deviceProperties;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceProperties(device,<sp/>&amp;deviceProperties);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDeviceFeatures<sp/>deviceFeatures;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceFeatures(device,<sp/>&amp;deviceFeatures);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>deviceProperties.deviceType<sp/>==<sp/>VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aa7119d6c81d102e4c9903f7d241fca6d" kindref="member">FindQueueFamilies</ref>(device).<ref refid="struct_queue_family_indices_1aa76a81b99ede5c37d75423298765b41c" kindref="member">IsComplete</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a0578514331364e68deca1d37a05f84e0" kindref="member">CheckDeviceExtensionSupport</ref>(device)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="class_vulkan_renderer_1a60c7b1683e2f296452b807289aec7023" kindref="member">QuerySwapChainSupport</ref>(device).<ref refid="struct_swapchain_support_details_1ad80967c39fd3f3c09041d0aa7657b3a1" kindref="member">Formats</ref>.empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="class_vulkan_renderer_1a60c7b1683e2f296452b807289aec7023" kindref="member">QuerySwapChainSupport</ref>(device).<ref refid="struct_swapchain_support_details_1a783cb0b46c795c2ad9ebf50713cf24a9" kindref="member">PresentationModes</ref>.empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deviceFeatures.samplerAnisotropy<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deviceFeatures.geometryShader;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="class_vulkan_renderer_1a44d431822480747f4caeae2fc8c4ebef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a44d431822480747f4caeae2fc8c4ebef" kindref="member">VulkanRenderer::CreateLogicalDevice</ref>()</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_family_indices" kindref="compound">QueueFamilyIndices</ref><sp/>indices<sp/>=<sp/><ref refid="class_vulkan_renderer_1aa7119d6c81d102e4c9903f7d241fca6d" kindref="member">FindQueueFamilies</ref>(<ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkDeviceQueueCreateInfo&gt;<sp/>queueCreateInfos;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;uint32_t&gt;<sp/>uniqueQueueFamilies<sp/>=<sp/>{<sp/>indices.<ref refid="struct_queue_family_indices_1af8fbfd2dfdf24e0741ebe51a1a84055f" kindref="member">GraphicsFamily</ref>.value(),<sp/>indices.<ref refid="struct_queue_family_indices_1acc6594f5576b6e83be67e89733e9e380" kindref="member">PresentationFamily</ref>.value()<sp/>};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>queuePriority<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>queueFamily<sp/>:<sp/>uniqueQueueFamilies)<sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkDeviceQueueCreateInfo<sp/>queueCreateInfo{};</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queueCreateInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queueCreateInfo.queueFamilyIndex<sp/>=<sp/>queueFamily;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queueCreateInfo.queueCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queueCreateInfo.pQueuePriorities<sp/>=<sp/>&amp;queuePriority;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queueCreateInfos.push_back(queueCreateInfo);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDeviceFeatures<sp/>deviceFeatures{};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>deviceFeatures.samplerAnisotropy<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceCreateInfo<sp/>createInfo{};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.queueCreateInfoCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(queueCreateInfos.size());</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.pQueueCreateInfos<sp/>=<sp/>queueCreateInfos.data();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.enabledExtensionCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1a03b3efe9367a335c51f4e8ccdf1d68f2" kindref="member">DeviceExtensions</ref>.size());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.ppEnabledExtensionNames<sp/>=<sp/><ref refid="class_vulkan_renderer_1a03b3efe9367a335c51f4e8ccdf1d68f2" kindref="member">DeviceExtensions</ref>.data();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.pEnabledFeatures<sp/>=<sp/>&amp;deviceFeatures;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a8fad8533b5d1c72cf67c99c04315aa5a" kindref="member">EnableValidationLayers</ref>)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.enabledLayerCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1ad4f717f4a2c16fc6232ac51a72242678" kindref="member">ValidationLayerNames</ref>.size());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.ppEnabledLayerNames<sp/>=<sp/><ref refid="class_vulkan_renderer_1ad4f717f4a2c16fc6232ac51a72242678" kindref="member">ValidationLayerNames</ref>.data();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.enabledLayerCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateDevice(<ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref>,<sp/>&amp;createInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>logical<sp/>device!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetDeviceQueue(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>indices.<ref refid="struct_queue_family_indices_1af8fbfd2dfdf24e0741ebe51a1a84055f" kindref="member">GraphicsFamily</ref>.value(),<sp/>0,<sp/>&amp;<ref refid="class_vulkan_renderer_1ae7bd509b429f05d522613d08d85790d1" kindref="member">Queues</ref>.<ref refid="struct_queue_struct_1ae57150fdd38f013b350774f8458f443d" kindref="member">GraphicsQueue</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetDeviceQueue(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>indices.<ref refid="struct_queue_family_indices_1acc6594f5576b6e83be67e89733e9e380" kindref="member">PresentationFamily</ref>.value(),<sp/>0,<sp/>&amp;<ref refid="class_vulkan_renderer_1ae7bd509b429f05d522613d08d85790d1" kindref="member">Queues</ref>.<ref refid="struct_queue_struct_1ac06590ead8214dbb53306e34ffced65d" kindref="member">PresentationQueue</ref>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//---Validation-Layers------\\</highlight></codeline>
<codeline lineno="272"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="class_vulkan_renderer_1ae43b96ed1050e49ede7bee0e4f5bc4b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1ae43b96ed1050e49ede7bee0e4f5bc4b8" kindref="member">VulkanRenderer::CheckValidationLayerSupport</ref>()</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>layerCount;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>vkEnumerateInstanceLayerProperties(&amp;layerCount,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkLayerProperties&gt;<sp/>availableLayers(layerCount);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>vkEnumerateInstanceLayerProperties(&amp;layerCount,<sp/>availableLayers.data());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>layerName<sp/>:<sp/><ref refid="class_vulkan_renderer_1ad4f717f4a2c16fc6232ac51a72242678" kindref="member">ValidationLayerNames</ref>)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>layerName<sp/>:<sp/><ref refid="class_vulkan_renderer_1ad4f717f4a2c16fc6232ac51a72242678" kindref="member">ValidationLayerNames</ref>)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>layerFound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>layerProperties<sp/>:<sp/>availableLayers)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(layerName,<sp/>layerProperties.layerName)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layerFound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layerFound)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="class_vulkan_renderer_1a681fc37a6acf01cae3e9bb93d02cdbb2" refkind="member"><highlight class="normal">VkResult<sp/><ref refid="class_vulkan_renderer_1a681fc37a6acf01cae3e9bb93d02cdbb2" kindref="member">VulkanRenderer::CreateDebugUtilsMessengerEXT</ref>(VkInstance_T*&amp;<sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkDebugUtilsMessengerCreateInfoEXT*<sp/>pCreateInfo,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkAllocationCallbacks*<sp/>pAllocator,<sp/>VkDebugUtilsMessengerEXT_T**<sp/>pDebugMessenger)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>(PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(instance,<sp/></highlight><highlight class="stringliteral">&quot;vkCreateDebugUtilsMessengerEXT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func(instance,<sp/>pCreateInfo,<sp/>pAllocator,<sp/>pDebugMessenger);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VK_ERROR_EXTENSION_NOT_PRESENT;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//--------Debug-Messenger-------\\</highlight></codeline>
<codeline lineno="319"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="class_vulkan_renderer_1aa7b8ac951fd9e206f134a71b9fb57c50" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1aa7b8ac951fd9e206f134a71b9fb57c50" kindref="member">VulkanRenderer::SetUpDebugMessenger</ref>()</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_vulkan_renderer_1a8fad8533b5d1c72cf67c99c04315aa5a" kindref="member">EnableValidationLayers</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDebugUtilsMessengerCreateInfoEXT<sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a8000d76f00321651fd52f6a76a2b2737" kindref="member">PopulateDebugMessengerCreateInfo</ref>(createInfo);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a681fc37a6acf01cae3e9bb93d02cdbb2" kindref="member">CreateDebugUtilsMessengerEXT</ref>(<ref refid="class_vulkan_renderer_1a9f1bd036eebb9bd2d96e8cc8512d591b" kindref="member">Instance</ref>,<sp/>&amp;createInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a482ad7d57a50d8f37a75ce8b3d87addf" kindref="member">DebugMessenger</ref>)<sp/>!=<sp/>VK_SUCCESS)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>up<sp/>debug<sp/>messenger!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>function<sp/>will<sp/>not<sp/>be<sp/>used<sp/>anywhere<sp/>else<sp/>and<sp/>is<sp/>declared<sp/>here,<sp/>rather<sp/>the<sp/>in<sp/>the<sp/>header,<sp/>to<sp/>avoid<sp/>some<sp/>complications<sp/>in<sp/>forward<sp/>declaring<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>VKAPI_ATTR<sp/>VkBool32<sp/>VKAPI_CALL<sp/>debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT<sp/>messageSeverity,<sp/>VkDebugUtilsMessageTypeFlagsEXT<sp/>messageType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkDebugUtilsMessengerCallbackDataEXT*<sp/>pCallbackData,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pUserData)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;validation<sp/>layer:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pCallbackData-&gt;pMessage<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="class_vulkan_renderer_1a8000d76f00321651fd52f6a76a2b2737" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a8000d76f00321651fd52f6a76a2b2737" kindref="member">VulkanRenderer::PopulateDebugMessengerCreateInfo</ref>(VkDebugUtilsMessengerCreateInfoEXT&amp;<sp/>createInfo)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.messageSeverity<sp/>=<sp/>VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT<sp/>|<sp/>VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT<sp/>|<sp/>VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.messageType<sp/>=<sp/>VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT<sp/>|<sp/>VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT<sp/>|<sp/>VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.pfnUserCallback<sp/>=<sp/>debugCallback;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="class_vulkan_renderer_1a41457a1df4ca7de65af73ecccb3d256b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a41457a1df4ca7de65af73ecccb3d256b" kindref="member">VulkanRenderer::DestroyDebugUtilsMessengerEXT</ref>(VkInstance_T*<sp/>instance,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkAllocationCallbacks*<sp/>pAllocator)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>(PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(instance,<sp/></highlight><highlight class="stringliteral">&quot;vkDestroyDebugUtilsMessengerEXT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(instance,<sp/><ref refid="class_vulkan_renderer_1a482ad7d57a50d8f37a75ce8b3d87addf" kindref="member">DebugMessenger</ref>,<sp/>pAllocator);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//---------Queues------------\\</highlight></codeline>
<codeline lineno="359"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="class_vulkan_renderer_1aa7119d6c81d102e4c9903f7d241fca6d" refkind="member"><highlight class="normal"><ref refid="struct_queue_family_indices" kindref="compound">QueueFamilyIndices</ref><sp/><ref refid="class_vulkan_renderer_1aa7119d6c81d102e4c9903f7d241fca6d" kindref="member">VulkanRenderer::FindQueueFamilies</ref>(VkPhysicalDevice_T*<sp/>physicalDevice)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_family_indices" kindref="compound">QueueFamilyIndices</ref><sp/>indices;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>queueFamilyCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,<sp/>&amp;queueFamilyCount,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkQueueFamilyProperties&gt;<sp/>queueFamilies(queueFamilyCount);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,<sp/>&amp;queueFamilyCount,<sp/>queueFamilies.data());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>queueFamily<sp/>:<sp/>queueFamilies)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queueFamily.queueFlags<sp/>&amp;<sp/>VK_QUEUE_GRAPHICS_BIT)<sp/>indices.<ref refid="struct_queue_family_indices_1af8fbfd2dfdf24e0741ebe51a1a84055f" kindref="member">GraphicsFamily</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkBool32<sp/>presentSupport<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice,<sp/>i,<sp/><ref refid="class_vulkan_renderer_1a9c8e656f0f3739e0b1c2c26160fc9d37" kindref="member">GetSurface</ref>(),<sp/>&amp;presentSupport);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(presentSupport)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.<ref refid="struct_queue_family_indices_1acc6594f5576b6e83be67e89733e9e380" kindref="member">PresentationFamily</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indices.<ref refid="struct_queue_family_indices_1aa76a81b99ede5c37d75423298765b41c" kindref="member">IsComplete</ref>())<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//------Window-and-Surface------\\</highlight></codeline>
<codeline lineno="391"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="class_vulkan_renderer_1aa6a2a86b91a0b9a8f4b799e7f512e39d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1aa6a2a86b91a0b9a8f4b799e7f512e39d" kindref="member">VulkanRenderer::CreateSurface</ref>()</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_Vulkan_CreateSurface(<ref refid="class_window" kindref="compound">Window</ref>,<sp/><ref refid="class_vulkan_renderer_1a9f1bd036eebb9bd2d96e8cc8512d591b" kindref="member">Instance</ref>,<sp/>&amp;<ref refid="class_vulkan_renderer_1a58313e6f2324d8d8fa7ae5696300fa48" kindref="member">Surface</ref>)<sp/>!=<sp/>SDL_TRUE)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>window<sp/>surface!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="class_vulkan_renderer_1a8a1079dfe304174c5b11c959bd60eb22" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a8a1079dfe304174c5b11c959bd60eb22" kindref="member">VulkanRenderer::SetWindow</ref>(SDL_Window*<sp/>window)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_window" kindref="compound">Window</ref><sp/>=<sp/>window;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_SetWindowData(<ref refid="class_window" kindref="compound">Window</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vulkan<sp/>Window&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//------Swap-Chain---------\\</highlight></codeline>
<codeline lineno="407"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="class_vulkan_renderer_1a0578514331364e68deca1d37a05f84e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a0578514331364e68deca1d37a05f84e0" kindref="member">VulkanRenderer::CheckDeviceExtensionSupport</ref>(VkPhysicalDevice_T*<sp/>device)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>extensionCount;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>vkEnumerateDeviceExtensionProperties(device,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;extensionCount,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkExtensionProperties&gt;<sp/>availableExtensions(extensionCount);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>vkEnumerateDeviceExtensionProperties(device,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;extensionCount,<sp/>availableExtensions.data());</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>requiredExtensions(<ref refid="class_vulkan_renderer_1a03b3efe9367a335c51f4e8ccdf1d68f2" kindref="member">DeviceExtensions</ref>.begin(),<sp/><ref refid="class_vulkan_renderer_1a03b3efe9367a335c51f4e8ccdf1d68f2" kindref="member">DeviceExtensions</ref>.end());</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>extension<sp/>:<sp/>availableExtensions)<sp/>requiredExtensions.erase(extension.extensionName);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>requiredExtensions.empty();</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="class_vulkan_renderer_1a60c7b1683e2f296452b807289aec7023" refkind="member"><highlight class="normal"><ref refid="struct_swapchain_support_details" kindref="compound">SwapchainSupportDetails</ref><sp/><ref refid="class_vulkan_renderer_1a60c7b1683e2f296452b807289aec7023" kindref="member">VulkanRenderer::QuerySwapChainSupport</ref>(VkPhysicalDevice_T*<sp/>device)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_swapchain_support_details" kindref="compound">SwapchainSupportDetails</ref><sp/>details;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfaceCapabilitiesKHR(device,<sp/><ref refid="class_vulkan_renderer_1a58313e6f2324d8d8fa7ae5696300fa48" kindref="member">Surface</ref>,<sp/>details.<ref refid="struct_swapchain_support_details_1ac96f1dd51f5b6c42495d886a7485be3b" kindref="member">Capabilities</ref>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>formatCount;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfaceFormatsKHR(device,<sp/><ref refid="class_vulkan_renderer_1a58313e6f2324d8d8fa7ae5696300fa48" kindref="member">Surface</ref>,<sp/>&amp;formatCount,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formatCount<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details.<ref refid="struct_swapchain_support_details_1ad80967c39fd3f3c09041d0aa7657b3a1" kindref="member">Formats</ref>.resize(formatCount);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfaceFormatsKHR(device,<sp/><ref refid="class_vulkan_renderer_1a58313e6f2324d8d8fa7ae5696300fa48" kindref="member">Surface</ref>,<sp/>&amp;formatCount,<sp/>details.<ref refid="struct_swapchain_support_details_1ad80967c39fd3f3c09041d0aa7657b3a1" kindref="member">Formats</ref>.data());</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>presentationModeCount;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfacePresentModesKHR(device,<sp/><ref refid="class_vulkan_renderer_1a58313e6f2324d8d8fa7ae5696300fa48" kindref="member">Surface</ref>,<sp/>&amp;presentationModeCount,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(presentationModeCount<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details.<ref refid="struct_swapchain_support_details_1a783cb0b46c795c2ad9ebf50713cf24a9" kindref="member">PresentationModes</ref>.resize(presentationModeCount);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfacePresentModesKHR(device,<sp/><ref refid="class_vulkan_renderer_1a58313e6f2324d8d8fa7ae5696300fa48" kindref="member">Surface</ref>,<sp/>&amp;presentationModeCount,<sp/>details.<ref refid="struct_swapchain_support_details_1a783cb0b46c795c2ad9ebf50713cf24a9" kindref="member">PresentationModes</ref>.data());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>details;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="class_vulkan_renderer_1aeaef89ca0dd49e90182d104430412a4e" refkind="member"><highlight class="normal">VkSurfaceFormatKHR<sp/><ref refid="class_vulkan_renderer_1aeaef89ca0dd49e90182d104430412a4e" kindref="member">VulkanRenderer::ChooseSwapSurfaceFormat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VkSurfaceFormatKHR&gt;<sp/>availableFormats)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>availableFormat<sp/>:<sp/>availableFormats)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(availableFormat.format<sp/>==<sp/>VK_FORMAT_B8G8R8A8_SRGB<sp/>&amp;&amp;<sp/>availableFormat.colorSpace<sp/>==<sp/>VK_COLOR_SPACE_SRGB_NONLINEAR_KHR)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>availableFormat;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>availableFormats[0];</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="class_vulkan_renderer_1a8ef069eafe993ad8dcff1d2b336fea36" refkind="member"><highlight class="normal">VkPresentModeKHR<sp/><ref refid="class_vulkan_renderer_1a8ef069eafe993ad8dcff1d2b336fea36" kindref="member">VulkanRenderer::ChooseSwapPresentMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VkPresentModeKHR&gt;&amp;<sp/>availablePresentModes)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>availablePresentMode<sp/>:<sp/>availablePresentModes)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(availablePresentMode<sp/>==<sp/>VK_PRESENT_MODE_MAILBOX_KHR)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>availablePresentMode;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VK_PRESENT_MODE_FIFO_KHR;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="class_vulkan_renderer_1a1431956db260d157c99f0ef870a1fc53" refkind="member"><highlight class="normal">VkExtent2D<sp/><ref refid="class_vulkan_renderer_1a1431956db260d157c99f0ef870a1fc53" kindref="member">VulkanRenderer::ChooseSwapExtent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkSurfaceCapabilitiesKHR*<sp/>capabilities)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capabilities-&gt;currentExtent.width<sp/>!=<sp/>UINT32_MAX)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capabilities-&gt;currentExtent;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Window*<sp/>window<sp/>=<sp/><ref refid="class_vulkan_renderer_1ac84f0ccfcb5646f07fd5a1c0dc3be6ae" kindref="member">Window</ref>;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Vulkan_GetDrawableSize(window,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkExtent2D<sp/>actualExtent<sp/>=<sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(width),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(height)<sp/>};</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualExtent.width<sp/>=<sp/>std::max(capabilities-&gt;minImageExtent.width,<sp/>std::min(capabilities-&gt;maxImageExtent.width,<sp/>actualExtent.width));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualExtent.height<sp/>=<sp/>std::max(capabilities-&gt;minImageExtent.height,<sp/>std::min(capabilities-&gt;maxImageExtent.height,<sp/>actualExtent.height));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>actualExtent;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="class_vulkan_renderer_1aeb6c4d150a18207fdef4ee0ecfe1c7e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1aeb6c4d150a18207fdef4ee0ecfe1c7e2" kindref="member">VulkanRenderer::CreateSwapChain</ref>()</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_swapchain_support_details" kindref="compound">SwapchainSupportDetails</ref><sp/>swapChainSupport<sp/>=<sp/><ref refid="class_vulkan_renderer_1a60c7b1683e2f296452b807289aec7023" kindref="member">QuerySwapChainSupport</ref>(<ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceFormatKHR<sp/>surfaceFormat<sp/>=<sp/><ref refid="class_vulkan_renderer_1aeaef89ca0dd49e90182d104430412a4e" kindref="member">ChooseSwapSurfaceFormat</ref>(swapChainSupport.<ref refid="struct_swapchain_support_details_1ad80967c39fd3f3c09041d0aa7657b3a1" kindref="member">Formats</ref>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPresentModeKHR<sp/>presentationMode<sp/>=<sp/><ref refid="class_vulkan_renderer_1a8ef069eafe993ad8dcff1d2b336fea36" kindref="member">ChooseSwapPresentMode</ref>(swapChainSupport.<ref refid="struct_swapchain_support_details_1a783cb0b46c795c2ad9ebf50713cf24a9" kindref="member">PresentationModes</ref>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>VkExtent2D<sp/>extent<sp/>=<sp/><ref refid="class_vulkan_renderer_1a1431956db260d157c99f0ef870a1fc53" kindref="member">ChooseSwapExtent</ref>(swapChainSupport.<ref refid="struct_swapchain_support_details_1ac96f1dd51f5b6c42495d886a7485be3b" kindref="member">Capabilities</ref>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>imageCount<sp/>=<sp/>swapChainSupport.<ref refid="struct_swapchain_support_details_1ac96f1dd51f5b6c42495d886a7485be3b" kindref="member">Capabilities</ref>-&gt;minImageCount<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapChainSupport.<ref refid="struct_swapchain_support_details_1ac96f1dd51f5b6c42495d886a7485be3b" kindref="member">Capabilities</ref>-&gt;maxImageCount<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>imageCount<sp/>&gt;<sp/>swapChainSupport.<ref refid="struct_swapchain_support_details_1ac96f1dd51f5b6c42495d886a7485be3b" kindref="member">Capabilities</ref>-&gt;maxImageCount)<sp/>imageCount<sp/>=<sp/>swapChainSupport.<ref refid="struct_swapchain_support_details_1ac96f1dd51f5b6c42495d886a7485be3b" kindref="member">Capabilities</ref>-&gt;maxImageCount;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainCreateInfoKHR<sp/>createInfo{};</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.surface<sp/>=<sp/><ref refid="class_vulkan_renderer_1a58313e6f2324d8d8fa7ae5696300fa48" kindref="member">Surface</ref>;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.minImageCount<sp/>=<sp/>imageCount;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageFormat<sp/>=<sp/>surfaceFormat.format;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageColorSpace<sp/>=<sp/>surfaceFormat.colorSpace;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageExtent<sp/>=<sp/>extent;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageArrayLayers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageUsage<sp/>=<sp/>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_family_indices" kindref="compound">QueueFamilyIndices</ref><sp/>indices<sp/>=<sp/><ref refid="class_vulkan_renderer_1aa7119d6c81d102e4c9903f7d241fca6d" kindref="member">FindQueueFamilies</ref>(<ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>queueFamilyIndices[]<sp/>=<sp/>{<sp/>indices.<ref refid="struct_queue_family_indices_1af8fbfd2dfdf24e0741ebe51a1a84055f" kindref="member">GraphicsFamily</ref>.value(),<sp/>indices.<ref refid="struct_queue_family_indices_1acc6594f5576b6e83be67e89733e9e380" kindref="member">PresentationFamily</ref>.value()<sp/>};</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indices.<ref refid="struct_queue_family_indices_1af8fbfd2dfdf24e0741ebe51a1a84055f" kindref="member">GraphicsFamily</ref><sp/>!=<sp/>indices.<ref refid="struct_queue_family_indices_1acc6594f5576b6e83be67e89733e9e380" kindref="member">PresentationFamily</ref>)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.imageSharingMode<sp/>=<sp/>VK_SHARING_MODE_CONCURRENT;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.queueFamilyIndexCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.pQueueFamilyIndices<sp/>=<sp/>queueFamilyIndices;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.imageSharingMode<sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.queueFamilyIndexCount<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo.pQueueFamilyIndices<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.preTransform<sp/>=<sp/>swapChainSupport.<ref refid="struct_swapchain_support_details_1ac96f1dd51f5b6c42495d886a7485be3b" kindref="member">Capabilities</ref>-&gt;currentTransform;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.compositeAlpha<sp/>=<sp/>VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.presentMode<sp/>=<sp/>presentationMode;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.clipped<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.oldSwapchain<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateSwapchainKHR(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;createInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a0e7b08136d8e54f064ebd04433c856c5" kindref="member">SwapChain</ref>)<sp/>!=<sp/>VK_SUCCESS)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>SwapChain!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetSwapchainImagesKHR(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a0e7b08136d8e54f064ebd04433c856c5" kindref="member">SwapChain</ref>,<sp/>&amp;imageCount,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.resize(imageCount);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetSwapchainImagesKHR(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a0e7b08136d8e54f064ebd04433c856c5" kindref="member">SwapChain</ref>,<sp/>&amp;imageCount,<sp/><ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.data());</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a1f45febc6820565503ce2ed07886dd65" kindref="member">SwapChainImageFormat</ref><sp/>=<sp/>surfaceFormat.format;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VkExtent2D(extent);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="class_vulkan_renderer_1ac504071c8b88a48f1d14fb3d50e64c7b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1ac504071c8b88a48f1d14fb3d50e64c7b" kindref="member">VulkanRenderer::RecreateSwapChain</ref>()</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_GetWindowSize(<ref refid="class_window" kindref="compound">Window</ref>,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_WaitEvent(&amp;<ref refid="class_vulkan_renderer_1a3526e95262e033f98a14dc57f334fc93" kindref="member">SDLManager</ref>-&gt;GetEvent());</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(width<sp/>==<sp/>0<sp/>||<sp/>height<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDeviceWaitIdle(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a1c56d565844ab62f6da069ccceaff973" kindref="member">CleanUpSwapChain</ref>();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aeb6c4d150a18207fdef4ee0ecfe1c7e2" kindref="member">CreateSwapChain</ref>();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a72559bcf1389dced82df0a5aab5b10cf" kindref="member">CreateImageViews</ref>();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a6256bdc4a670eb2425a6e28962f13da4" kindref="member">CreateRenderPass</ref>();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a4e191872c39fb793536b3a635d08f0db" kindref="member">CreateGraphicsPipeline</ref>();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a660660e9dcf36dcadd1e338c078a4a3e" kindref="member">CreateDepthResources</ref>();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aa019f81dedc6a1dbad21e83f7f7e40e4" kindref="member">CreateFramebuffers</ref>();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a42650894ca08c0d2491c612ef90dabca" kindref="member">CreateUniformBuffers</ref>();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1abb3941e44bfd564b176afed482cbac38" kindref="member">CreateDescriptorPool</ref>();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a83aecfc9db0274ac1b4f997d2c91c530" kindref="member">CreateDescriptorSets</ref>();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a2b2ae7f89d20bb03007c5e8cba54450c" kindref="member">CreateCommandBuffers</ref>();</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="class_vulkan_renderer_1a72559bcf1389dced82df0a5aab5b10cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a72559bcf1389dced82df0a5aab5b10cf" kindref="member">VulkanRenderer::CreateImageViews</ref>()</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a9731e818f02b403b3a82f83561cf2062" kindref="member">SwapChainImageViews</ref>.resize(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size());</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a9731e818f02b403b3a82f83561cf2062" kindref="member">SwapChainImageViews</ref>[i]<sp/>=<sp/><ref refid="class_vulkan_renderer_1aab85e65b6fae7c31efd893c3967ad7ef" kindref="member">CreateImageView</ref>(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>[i],<sp/><ref refid="class_vulkan_renderer_1a1f45febc6820565503ce2ed07886dd65" kindref="member">SwapChainImageFormat</ref>,<sp/>VK_IMAGE_ASPECT_COLOR_BIT);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585" refid="class_vulkan_renderer_1aab85e65b6fae7c31efd893c3967ad7ef" refkind="member"><highlight class="normal">VkImageView_T*<sp/><ref refid="class_vulkan_renderer_1aab85e65b6fae7c31efd893c3967ad7ef" kindref="member">VulkanRenderer::CreateImageView</ref>(VkImage_T*<sp/>image,<sp/>VkFormat<sp/>format,<sp/><ref refid="_vulkan_renderer_8h_1a1dc6a69eefc5cddb8237b87d5c22d1ec" kindref="member">VkImageAspectFlags</ref><sp/>aspectFlags)</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageViewCreateInfo<sp/>viewInfo{};</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>viewInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>viewInfo.image<sp/>=<sp/>image;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>viewInfo.viewType<sp/>=<sp/>VK_IMAGE_VIEW_TYPE_2D;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>viewInfo.format<sp/>=<sp/>format;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>viewInfo.subresourceRange.aspectMask<sp/>=<sp/>aspectFlags;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>viewInfo.subresourceRange.baseMipLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>viewInfo.subresourceRange.levelCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>viewInfo.subresourceRange.baseArrayLayer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>viewInfo.subresourceRange.layerCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageView<sp/>imageView;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateImageView(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;viewInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;imageView)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>texture<sp/>image<sp/>view!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imageView;</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="class_vulkan_renderer_1a1c56d565844ab62f6da069ccceaff973" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a1c56d565844ab62f6da069ccceaff973" kindref="member">VulkanRenderer::CleanUpSwapChain</ref>()</highlight></codeline>
<codeline lineno="608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImageView(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1afc22fdf02bae5261782729828b7e13c6" kindref="member">DepthImageView</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImage(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a761518526442951cde32bac9a992aa85" kindref="member">DepthImage</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a9656767a9d374a7c05bc37dc37002a06" kindref="member">DepthImageMemory</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>framebuffer<sp/>:<sp/><ref refid="class_vulkan_renderer_1ab1e74f6d4aa40f8cf8d895fe743c75fc" kindref="member">SwapChainFramebuffers</ref>)<sp/>vkDestroyFramebuffer(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>framebuffer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeCommandBuffers(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a89485667c8f0edc91cbc1db315ff5824" kindref="member">CommandPool</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>.size()),<sp/><ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>.data());</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyPipeline(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a2e3fa2465ef2c2dc1d7b1b242340ed05" kindref="member">GraphicsPipeline</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyPipelineLayout(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1acf17347168bee82a3dcc753d5bb50af0" kindref="member">PipelineLayout</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyRenderPass(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a42bfa5926d9e1d7998f02f6becc27c02" kindref="member">RenderPass</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_vulkan_renderer_1a9731e818f02b403b3a82f83561cf2062" kindref="member">SwapChainImageViews</ref>.size();<sp/>i++)<sp/>vkDestroyImageView(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a9731e818f02b403b3a82f83561cf2062" kindref="member">SwapChainImageViews</ref>[i],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySwapchainKHR(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a0e7b08136d8e54f064ebd04433c856c5" kindref="member">SwapChain</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>buffer<sp/>:<sp/><ref refid="class_vulkan_renderer_1a088b179ef981d1913e3dbe8d7a5e2c58" kindref="member">UniformBuffers</ref>)<sp/>{<sp/>vkDestroyBuffer(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>buffer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>memory<sp/>:<sp/><ref refid="class_vulkan_renderer_1aaaee01b00bfa699f0e76811acafacb57" kindref="member">UniformBuffersMemory</ref>)<sp/>{<sp/>vkFreeMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>memory,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDescriptorPool(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a90ec637836292e1403a870800072716c" kindref="member">DescriptorPool</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//-----Graphics-Pipeline----\\</highlight></codeline>
<codeline lineno="625"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="class_vulkan_renderer_1a4e191872c39fb793536b3a635d08f0db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a4e191872c39fb793536b3a635d08f0db" kindref="member">VulkanRenderer::CreateGraphicsPipeline</ref>()</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertShaderCode<sp/>=<sp/><ref refid="class_vulkan_renderer_1a829ab1bd862fc6c6038ee4280437a418" kindref="member">ReadFile</ref>(</highlight><highlight class="stringliteral">&quot;Shaders/vert.spv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fragShaderCode<sp/>=<sp/><ref refid="class_vulkan_renderer_1a829ab1bd862fc6c6038ee4280437a418" kindref="member">ReadFile</ref>(</highlight><highlight class="stringliteral">&quot;Shaders/frag.spv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/>vertShaderModule<sp/>=<sp/><ref refid="class_vulkan_renderer_1a34d617b44ad3a4be4feac8917a572280" kindref="member">CreateShaderModule</ref>(vertShaderCode);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/>fragShaderModule<sp/>=<sp/><ref refid="class_vulkan_renderer_1a34d617b44ad3a4be4feac8917a572280" kindref="member">CreateShaderModule</ref>(fragShaderCode);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineShaderStageCreateInfo<sp/>vertShaderStageInfo{};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>vertShaderStageInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>vertShaderStageInfo.stage<sp/>=<sp/>VK_SHADER_STAGE_VERTEX_BIT;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>vertShaderStageInfo.module<sp/>=<sp/>vertShaderModule;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>vertShaderStageInfo.pName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineShaderStageCreateInfo<sp/>fragShaderStageInfo{};</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>fragShaderStageInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>fragShaderStageInfo.stage<sp/>=<sp/>VK_SHADER_STAGE_FRAGMENT_BIT;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>fragShaderStageInfo.module<sp/>=<sp/>fragShaderModule;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>fragShaderStageInfo.pName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineShaderStageCreateInfo<sp/>shaderStages[]<sp/>=<sp/>{<sp/>vertShaderStageInfo,<sp/>fragShaderStageInfo<sp/>};</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bindingDescription<sp/>=<sp/><ref refid="struct_vertex_1a449afaf47ed71b80e7c10ac6f0b741c0" kindref="member">Vertex::GetBindingDescription</ref>();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>attributeDescriptions<sp/>=<sp/><ref refid="struct_vertex_1aa8d2c95c96d38a222b02f7841f00c51b" kindref="member">Vertex::GetAttributeDescriptions</ref>();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineVertexInputStateCreateInfo<sp/>vertexInputInfo{};</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexInputInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexInputInfo.vertexBindingDescriptionCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexInputInfo.pVertexBindingDescriptions<sp/>=<sp/>&amp;bindingDescription;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexInputInfo.vertexAttributeDescriptionCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(attributeDescriptions.size());</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexInputInfo.pVertexAttributeDescriptions<sp/>=<sp/>attributeDescriptions.data();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineInputAssemblyStateCreateInfo<sp/>inputAssembly{};</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>inputAssembly.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>inputAssembly.topology<sp/>=<sp/>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>inputAssembly.primitiveRestartEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>VkViewport<sp/>viewport{};</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.x<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.y<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.width<sp/>=<sp/>(float)<ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>-&gt;width;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.height<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>-&gt;height;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.minDepth<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.maxDepth<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRect2D<sp/>scissor{};</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.offset<sp/>=<sp/>{<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.extent<sp/>=<sp/>*<ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineViewportStateCreateInfo<sp/>viewportState{};</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>viewportState.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>viewportState.viewportCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>viewportState.pViewports<sp/>=<sp/>&amp;viewport;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>viewportState.scissorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>viewportState.pScissors<sp/>=<sp/>&amp;scissor;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineRasterizationStateCreateInfo<sp/>rasterizer{};</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.depthClampEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.rasterizerDiscardEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.polygonMode<sp/>=<sp/>VK_POLYGON_MODE_FILL;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.lineWidth<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.cullMode<sp/>=<sp/>VK_CULL_MODE_BACK_BIT;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.frontFace<sp/>=<sp/>VK_FRONT_FACE_COUNTER_CLOCKWISE;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.depthBiasEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.depthBiasConstantFactor<sp/>=<sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.depthBiasClamp<sp/>=<sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>rasterizer.depthBiasSlopeFactor<sp/>=<sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineMultisampleStateCreateInfo<sp/>multisampling{};</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>multisampling.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>multisampling.sampleShadingEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>multisampling.rasterizationSamples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>multisampling.minSampleShading<sp/>=<sp/>1.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>multisampling.pSampleMask<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>multisampling.alphaToCoverageEnable<sp/>=<sp/>VK_FALSE;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>multisampling.alphaToOneEnable<sp/>=<sp/>VK_FALSE;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineColorBlendAttachmentState<sp/>colorBlendAttachment{};</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.colorWriteMask<sp/>=<sp/>VK_COLOR_COMPONENT_R_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_G_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_B_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_A_BIT;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.blendEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.srcColorBlendFactor<sp/>=<sp/>VK_BLEND_FACTOR_ONE;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.dstColorBlendFactor<sp/>=<sp/>VK_BLEND_FACTOR_ZERO;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.colorBlendOp<sp/>=<sp/>VK_BLEND_OP_ADD;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.srcAlphaBlendFactor<sp/>=<sp/>VK_BLEND_FACTOR_ONE;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.dstAlphaBlendFactor<sp/>=<sp/>VK_BLEND_FACTOR_ZERO;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.alphaBlendOp<sp/>=<sp/>VK_BLEND_OP_ADD;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineColorBlendStateCreateInfo<sp/>colorBlending{};</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlending.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlending.logicOpEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlending.logicOp<sp/>=<sp/>VK_LOGIC_OP_COPY;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlending.attachmentCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlending.pAttachments<sp/>=<sp/>&amp;colorBlendAttachment;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlending.blendConstants[0]<sp/>=<sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlending.blendConstants[1]<sp/>=<sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlending.blendConstants[2]<sp/>=<sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlending.blendConstants[3]<sp/>=<sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDynamicState<sp/>dynamicStates[]<sp/>=<sp/>{<sp/>VK_DYNAMIC_STATE_VIEWPORT,<sp/><sp/>VK_DYNAMIC_STATE_LINE_WIDTH<sp/>};</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineDynamicStateCreateInfo<sp/>dynamicState{};</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicState.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicState.dynamicStateCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicState.pDynamicStates<sp/>=<sp/>dynamicStates;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineLayoutCreateInfo<sp/>pipelineLayoutInfo{};</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineLayoutInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineLayoutInfo.setLayoutCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineLayoutInfo.pSetLayouts<sp/>=<sp/>&amp;<ref refid="class_vulkan_renderer_1a5dd7349516665b3299a99191698d96a1" kindref="member">DescriptorSetLayout</ref>;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineLayoutInfo.pushConstantRangeCount<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineLayoutInfo.pPushConstantRanges<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreatePipelineLayout(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;pipelineLayoutInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1acf17347168bee82a3dcc753d5bb50af0" kindref="member">PipelineLayout</ref>)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>pipeline<sp/>layout!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineDepthStencilStateCreateInfo<sp/>depthStencil{};</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.depthTestEnable<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.depthWriteEnable<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.depthCompareOp<sp/>=<sp/>VK_COMPARE_OP_LESS;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.depthBoundsTestEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.minDepthBounds<sp/>=<sp/>0.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.maxDepthBounds<sp/>=<sp/>1.0f;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.stencilTestEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.front<sp/>=<sp/>{};<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencil.back<sp/>=<sp/>{};<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>VkGraphicsPipelineCreateInfo<sp/>pipelineInfo{};</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.stageCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pStages<sp/>=<sp/>shaderStages;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pVertexInputState<sp/>=<sp/>&amp;vertexInputInfo;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pInputAssemblyState<sp/>=<sp/>&amp;inputAssembly;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pViewportState<sp/>=<sp/>&amp;viewportState;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pRasterizationState<sp/>=<sp/>&amp;rasterizer;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pMultisampleState<sp/>=<sp/>&amp;multisampling;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pDepthStencilState<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pColorBlendState<sp/>=<sp/>&amp;colorBlending;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pDynamicState<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.layout<sp/>=<sp/><ref refid="class_vulkan_renderer_1acf17347168bee82a3dcc753d5bb50af0" kindref="member">PipelineLayout</ref>;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.renderPass<sp/>=<sp/><ref refid="class_vulkan_renderer_1a42bfa5926d9e1d7998f02f6becc27c02" kindref="member">RenderPass</ref>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.subpass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.basePipelineHandle<sp/>=<sp/>VK_NULL_HANDLE;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.basePipelineIndex<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineInfo.pDepthStencilState<sp/>=<sp/>&amp;depthStencil;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateGraphicsPipelines(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>VK_NULL_HANDLE,<sp/>1,<sp/>&amp;pipelineInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a2e3fa2465ef2c2dc1d7b1b242340ed05" kindref="member">GraphicsPipeline</ref>)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>graphics<sp/>pipeline!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyShaderModule(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>fragShaderModule,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyShaderModule(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>vertShaderModule,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="class_vulkan_renderer_1a6256bdc4a670eb2425a6e28962f13da4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a6256bdc4a670eb2425a6e28962f13da4" kindref="member">VulkanRenderer::CreateRenderPass</ref>()</highlight></codeline>
<codeline lineno="785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentDescription<sp/>colorAttachment{};</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachment.format<sp/>=<sp/><ref refid="class_vulkan_renderer_1a1f45febc6820565503ce2ed07886dd65" kindref="member">SwapChainImageFormat</ref>;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachment.samples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachment.loadOp<sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_CLEAR;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachment.storeOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_STORE;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachment.stencilLoadOp<sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachment.stencilStoreOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachment.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachment.finalLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentReference<sp/>colorAttachmentRef{};</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachmentRef.attachment<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>colorAttachmentRef.layout<sp/>=<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentDescription<sp/>depthAttachment{};</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachment.format<sp/>=<sp/><ref refid="class_vulkan_renderer_1a5fc174a63a78b24ce7299518cfd5d37f" kindref="member">FindDepthFormat</ref>();</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachment.samples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachment.loadOp<sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_CLEAR;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachment.storeOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachment.stencilLoadOp<sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachment.stencilStoreOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachment.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachment.finalLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentReference<sp/>depthAttachmentRef{};</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachmentRef.attachment<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>depthAttachmentRef.layout<sp/>=<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSubpassDescription<sp/>subpass{};</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>subpass.pipelineBindPoint<sp/>=<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>subpass.colorAttachmentCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>subpass.pColorAttachments<sp/>=<sp/>&amp;colorAttachmentRef;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>subpass.pDepthStencilAttachment<sp/>=<sp/>&amp;depthAttachmentRef;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSubpassDependency<sp/>dependency{};</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>dependency.srcSubpass<sp/>=<sp/>VK_SUBPASS_EXTERNAL;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>dependency.dstSubpass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>dependency.srcStageMask<sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT<sp/>|<sp/>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>dependency.dstStageMask<sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT<sp/>|<sp/>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>dependency.srcAccessMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>dependency.dstAccessMask<sp/>=<sp/>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT<sp/>|<sp/>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;VkAttachmentDescription,<sp/>2&gt;<sp/>attachments<sp/>=<sp/>{<sp/>colorAttachment,<sp/>depthAttachment<sp/>};</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderPassCreateInfo<sp/>renderPassInfo{};</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.attachmentCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(attachments.size());</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.pAttachments<sp/>=<sp/>attachments.data();</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.subpassCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.pSubpasses<sp/>=<sp/>&amp;subpass;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.dependencyCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.pDependencies<sp/>=<sp/>&amp;dependency;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateRenderPass(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;renderPassInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a42bfa5926d9e1d7998f02f6becc27c02" kindref="member">RenderPass</ref>)<sp/>!=<sp/>VK_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>render<sp/>pass!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//--------Shaders--------\\</highlight></codeline>
<codeline lineno="845"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846" refid="class_vulkan_renderer_1a829ab1bd862fc6c6038ee4280437a418" refkind="member"><highlight class="normal">std::vector&lt;char&gt;<sp/><ref refid="class_vulkan_renderer_1a829ab1bd862fc6c6038ee4280437a418" kindref="member">VulkanRenderer::ReadFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>file(filename,<sp/>std::ios::ate<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file.is_open())<sp/></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>file!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fileSize<sp/>=<sp/>(size_t)file.tellg();</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>buffer(fileSize);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>file.seekg(0);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>file.read(buffer.data(),<sp/>fileSize);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864" refid="class_vulkan_renderer_1a34d617b44ad3a4be4feac8917a572280" refkind="member"><highlight class="normal">VkShaderModule_T*<sp/><ref refid="class_vulkan_renderer_1a34d617b44ad3a4be4feac8917a572280" kindref="member">VulkanRenderer::CreateShaderModule</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;char&gt;&amp;<sp/>code)</highlight></codeline>
<codeline lineno="865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModuleCreateInfo<sp/>createInfo{};</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.codeSize<sp/>=<sp/>code.size();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.pCode<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(code.data());</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/>shaderModule;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateShaderModule(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;createInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;shaderModule)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>shader<sp/>module!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shaderModule;</highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">//-------Buffers-------\\</highlight></codeline>
<codeline lineno="881"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882" refid="class_vulkan_renderer_1a42c04d82c50716168280f8354b6aa54a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a42c04d82c50716168280f8354b6aa54a" kindref="member">VulkanRenderer::CreateBuffer</ref>(<ref refid="_vulkan_manager_8h_1a990404191b278871ffcc40552a4893ed" kindref="member">VkDeviceSize</ref><sp/>size,<sp/><ref refid="_vulkan_manager_8h_1ab221f627433dcae79b6a004fc42b50a9" kindref="member">VkBufferUsageFlags</ref><sp/>usage,<sp/><ref refid="_vulkan_manager_8h_1a06f71178c68bf5712dbec35d6f124122" kindref="member">VkMemoryPropertyFlags</ref><sp/>properties,<sp/>VkBuffer_T*&amp;<sp/>buffer,<sp/>VkDeviceMemory_T*&amp;<sp/>bufferMemory)</highlight></codeline>
<codeline lineno="883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBufferCreateInfo<sp/>bufferInfo{};</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferInfo.size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferInfo.usage<sp/>=<sp/>usage;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>bufferInfo.sharingMode<sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateBuffer(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;bufferInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;buffer)<sp/>!=<sp/>VK_SUCCESS)</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>buffer!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>VkMemoryRequirements<sp/>memRequirements;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetBufferMemoryRequirements(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>buffer,<sp/>&amp;memRequirements);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>VkMemoryAllocateInfo<sp/>allocInfo{};</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.allocationSize<sp/>=<sp/>memRequirements.size;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.memoryTypeIndex<sp/>=<sp/><ref refid="class_vulkan_renderer_1abe9c0273e7dd404121f9c8fb7d76faec" kindref="member">FindMemoryType</ref>(memRequirements.memoryTypeBits,<sp/>properties);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkAllocateMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;allocInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;bufferMemory)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>buffer<sp/>memory!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>vkBindBufferMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>buffer,<sp/>bufferMemory,<sp/>0);</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911" refid="class_vulkan_renderer_1aa019f81dedc6a1dbad21e83f7f7e40e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1aa019f81dedc6a1dbad21e83f7f7e40e4" kindref="member">VulkanRenderer::CreateFramebuffers</ref>()</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1ab1e74f6d4aa40f8cf8d895fe743c75fc" kindref="member">SwapChainFramebuffers</ref>.resize(<ref refid="class_vulkan_renderer_1a9731e818f02b403b3a82f83561cf2062" kindref="member">SwapChainImageViews</ref>.size());</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_vulkan_renderer_1a9731e818f02b403b3a82f83561cf2062" kindref="member">SwapChainImageViews</ref>.size();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;VkImageView,<sp/>2&gt;<sp/>attachments<sp/>=<sp/>{<sp/><ref refid="class_vulkan_renderer_1a9731e818f02b403b3a82f83561cf2062" kindref="member">SwapChainImageViews</ref>[i],<sp/><ref refid="class_vulkan_renderer_1afc22fdf02bae5261782729828b7e13c6" kindref="member">DepthImageView</ref><sp/>};</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkFramebufferCreateInfo<sp/>framebufferInfo{};</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebufferInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebufferInfo.renderPass<sp/>=<sp/><ref refid="class_vulkan_renderer_1a42bfa5926d9e1d7998f02f6becc27c02" kindref="member">RenderPass</ref>;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebufferInfo.attachmentCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(attachments.size());</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebufferInfo.pAttachments<sp/>=<sp/>attachments.data();</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebufferInfo.width<sp/>=<sp/><ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>-&gt;width;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebufferInfo.height<sp/>=<sp/><ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>-&gt;height;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebufferInfo.layers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateFramebuffer(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;framebufferInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1ab1e74f6d4aa40f8cf8d895fe743c75fc" kindref="member">SwapChainFramebuffers</ref>[i])<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>framebuffer!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935" refid="class_vulkan_renderer_1a9db8136d623dfe2387498b8e64084afc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a9db8136d623dfe2387498b8e64084afc" kindref="member">VulkanRenderer::CreateVertexBuffers</ref>()</highlight></codeline>
<codeline lineno="936"><highlight class="normal">{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_vulkan_manager_8h_1a990404191b278871ffcc40552a4893ed" kindref="member">VkDeviceSize</ref><sp/>bufferSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vertex" kindref="compound">Vertex</ref>)<sp/>*<sp/><ref refid="class_vulkan_renderer_1a11fad42b69d92aa388129f5e0ff69d1a" kindref="member">Vertices</ref>.size();</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/>stagingBuffer;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>stagingBufferMemory;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a42c04d82c50716168280f8354b6aa54a" kindref="member">CreateBuffer</ref>(bufferSize,<sp/>VK_BUFFER_USAGE_TRANSFER_SRC_BIT,<sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT<sp/>|<sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,<sp/>stagingBuffer,<sp/>stagingBufferMemory);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>vkMapMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBufferMemory,<sp/>0,<sp/>bufferSize,<sp/>0,<sp/>&amp;data);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(data,<sp/><ref refid="class_vulkan_renderer_1a11fad42b69d92aa388129f5e0ff69d1a" kindref="member">Vertices</ref>.data(),<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)bufferSize);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>vkUnmapMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBufferMemory);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a42c04d82c50716168280f8354b6aa54a" kindref="member">CreateBuffer</ref>(bufferSize,<sp/>VK_BUFFER_USAGE_TRANSFER_DST_BIT<sp/>|<sp/>VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,<sp/>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,<sp/><ref refid="class_vulkan_renderer_1ae491011283a9545e5f848cfa012663fa" kindref="member">VertexBuffer</ref>,<sp/><ref refid="class_vulkan_renderer_1a793f6480c6c70f22e530064061efab2e" kindref="member">VertexBufferMemory</ref>);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1ac52220627e0cf42c81f16fa8331863b7" kindref="member">CopyBuffer</ref>(stagingBuffer,<sp/><ref refid="class_vulkan_renderer_1ae491011283a9545e5f848cfa012663fa" kindref="member">VertexBuffer</ref>,<sp/>bufferSize);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyBuffer(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBuffer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBufferMemory,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955" refid="class_vulkan_renderer_1a40a4311d864f1caab3cfc02617263564" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a40a4311d864f1caab3cfc02617263564" kindref="member">VulkanRenderer::CreateIndexBuffer</ref>()</highlight></codeline>
<codeline lineno="956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_vulkan_manager_8h_1a990404191b278871ffcc40552a4893ed" kindref="member">VkDeviceSize</ref><sp/>bufferSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1aa35df30304dfa46c24befa95dca12a2a" kindref="member">Indices</ref>[0])<sp/>*<sp/><ref refid="class_vulkan_renderer_1aa35df30304dfa46c24befa95dca12a2a" kindref="member">Indices</ref>.size();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/>stagingBuffer;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>stagingBufferMemory;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a42c04d82c50716168280f8354b6aa54a" kindref="member">CreateBuffer</ref>(bufferSize,<sp/>VK_BUFFER_USAGE_TRANSFER_SRC_BIT,<sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT<sp/>|<sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,<sp/>stagingBuffer,<sp/>stagingBufferMemory);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>vkMapMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBufferMemory,<sp/>0,<sp/>bufferSize,<sp/>0,<sp/>&amp;data);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(data,<sp/><ref refid="class_vulkan_renderer_1aa35df30304dfa46c24befa95dca12a2a" kindref="member">Indices</ref>.data(),<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)bufferSize);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>vkUnmapMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBufferMemory);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a42c04d82c50716168280f8354b6aa54a" kindref="member">CreateBuffer</ref>(bufferSize,<sp/>VK_BUFFER_USAGE_TRANSFER_DST_BIT<sp/>|<sp/>VK_BUFFER_USAGE_INDEX_BUFFER_BIT,<sp/>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,<sp/><ref refid="class_vulkan_renderer_1aa28b87ded901f8164fa186baa9550150" kindref="member">IndexBuffer</ref>,<sp/><ref refid="class_vulkan_renderer_1a5d551006f6fc0b9eb86805545391a96d" kindref="member">IndexBufferMemory</ref>);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1ac52220627e0cf42c81f16fa8331863b7" kindref="member">CopyBuffer</ref>(stagingBuffer,<sp/><ref refid="class_vulkan_renderer_1aa28b87ded901f8164fa186baa9550150" kindref="member">IndexBuffer</ref>,<sp/>bufferSize);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyBuffer(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBuffer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBufferMemory,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976" refid="class_vulkan_renderer_1a42650894ca08c0d2491c612ef90dabca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a42650894ca08c0d2491c612ef90dabca" kindref="member">VulkanRenderer::CreateUniformBuffers</ref>()</highlight></codeline>
<codeline lineno="977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_vulkan_manager_8h_1a990404191b278871ffcc40552a4893ed" kindref="member">VkDeviceSize</ref><sp/>bufferSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_uniform_buffer_object" kindref="compound">UniformBufferObject</ref>);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a088b179ef981d1913e3dbe8d7a5e2c58" kindref="member">UniformBuffers</ref>.resize(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size());</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aaaee01b00bfa699f0e76811acafacb57" kindref="member">UniformBuffersMemory</ref>.resize(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size());</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a42c04d82c50716168280f8354b6aa54a" kindref="member">CreateBuffer</ref>(bufferSize,<sp/>VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,<sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT<sp/>|<sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,<sp/><ref refid="class_vulkan_renderer_1a088b179ef981d1913e3dbe8d7a5e2c58" kindref="member">UniformBuffers</ref>[i],<sp/><ref refid="class_vulkan_renderer_1aaaee01b00bfa699f0e76811acafacb57" kindref="member">UniformBuffersMemory</ref>[i]);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989" refid="class_vulkan_renderer_1a57ad62086fe479f168fa1ffd6b58e4d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a57ad62086fe479f168fa1ffd6b58e4d6" kindref="member">VulkanRenderer::CreateCommandPool</ref>()</highlight></codeline>
<codeline lineno="990"><highlight class="normal">{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_family_indices" kindref="compound">QueueFamilyIndices</ref><sp/>queueFamilyIndices<sp/>=<sp/><ref refid="class_vulkan_renderer_1aa7119d6c81d102e4c9903f7d241fca6d" kindref="member">FindQueueFamilies</ref>(<ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref>);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandPoolCreateInfo<sp/>poolInfo{};</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.queueFamilyIndex<sp/>=<sp/>queueFamilyIndices.<ref refid="struct_queue_family_indices_1af8fbfd2dfdf24e0741ebe51a1a84055f" kindref="member">GraphicsFamily</ref>.value();</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.flags<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateCommandPool(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;poolInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a89485667c8f0edc91cbc1db315ff5824" kindref="member">CommandPool</ref>)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>command<sp/>pool!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004" refid="class_vulkan_renderer_1a2b2ae7f89d20bb03007c5e8cba54450c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a2b2ae7f89d20bb03007c5e8cba54450c" kindref="member">VulkanRenderer::CreateCommandBuffers</ref>()</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>.resize(<ref refid="class_vulkan_renderer_1ab1e74f6d4aa40f8cf8d895fe743c75fc" kindref="member">SwapChainFramebuffers</ref>.size());</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBufferAllocateInfo<sp/>allocInfo{};</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.commandPool<sp/>=<sp/><ref refid="class_vulkan_renderer_1a89485667c8f0edc91cbc1db315ff5824" kindref="member">CommandPool</ref>;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.level<sp/>=<sp/>VK_COMMAND_BUFFER_LEVEL_PRIMARY;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.commandBufferCount<sp/>=<sp/>(uint32_t)<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>.size();</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkAllocateCommandBuffers(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;allocInfo,<sp/><ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>.data())<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>allocate<sp/>command<sp/>buffers!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>.size();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkCommandBufferBeginInfo<sp/>beginInfo{};</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beginInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beginInfo.flags<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beginInfo.pInheritanceInfo<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkBeginCommandBuffer(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[i],<sp/>&amp;beginInfo)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>begin<sp/>recording<sp/>command<sp/>buffer!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkRenderPassBeginInfo<sp/>renderPassInfo{};</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassInfo.renderPass<sp/>=<sp/><ref refid="class_vulkan_renderer_1a42bfa5926d9e1d7998f02f6becc27c02" kindref="member">RenderPass</ref>;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassInfo.framebuffer<sp/>=<sp/><ref refid="class_vulkan_renderer_1ab1e74f6d4aa40f8cf8d895fe743c75fc" kindref="member">SwapChainFramebuffers</ref>[i];</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassInfo.renderArea.offset<sp/>=<sp/>{<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassInfo.renderArea.extent<sp/>=<sp/>*<ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;VkClearValue,<sp/>2&gt;<sp/>clearValues{};</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clearValues[0].color<sp/>=<sp/>{<sp/>0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f<sp/>};</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clearValues[1].depthStencil<sp/>=<sp/>{<sp/>1.0f,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassInfo.clearValueCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(clearValues.size());</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassInfo.pClearValues<sp/>=<sp/>clearValues.data();</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkBuffer<sp/>vertexBuffers[]<sp/>=<sp/>{<sp/><ref refid="class_vulkan_renderer_1ae491011283a9545e5f848cfa012663fa" kindref="member">VertexBuffer</ref><sp/>};</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_vulkan_manager_8h_1a990404191b278871ffcc40552a4893ed" kindref="member">VkDeviceSize</ref><sp/>offsets[]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBeginRenderPass(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[i],<sp/>&amp;renderPassInfo,<sp/>VK_SUBPASS_CONTENTS_INLINE);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBindPipeline(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[i],<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS,<sp/><ref refid="class_vulkan_renderer_1a2e3fa2465ef2c2dc1d7b1b242340ed05" kindref="member">GraphicsPipeline</ref>);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBindVertexBuffers(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[i],<sp/>0,<sp/>1,<sp/>vertexBuffers,<sp/>offsets);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBindIndexBuffer(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[i],<sp/><ref refid="class_vulkan_renderer_1aa28b87ded901f8164fa186baa9550150" kindref="member">IndexBuffer</ref>,<sp/>0,<sp/>VK_INDEX_TYPE_UINT32);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBindDescriptorSets(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[i],<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS,<sp/><ref refid="class_vulkan_renderer_1acf17347168bee82a3dcc753d5bb50af0" kindref="member">PipelineLayout</ref>,<sp/>0,<sp/>1,<sp/>&amp;<ref refid="class_vulkan_renderer_1a21da9311dda520c2cf6c2014e34c5dff" kindref="member">DescriptorSets</ref>[i],<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdDrawIndexed(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[i],<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1aa35df30304dfa46c24befa95dca12a2a" kindref="member">Indices</ref>.size()),<sp/>1,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdEndRenderPass(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[i]);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkEndCommandBuffer(<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[i])<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>record<sp/>command<sp/>buffer!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062" refid="class_vulkan_renderer_1a4f3fddf8489a142969604beee4e2ba02" refkind="member"><highlight class="normal">VkCommandBuffer<sp/><ref refid="class_vulkan_renderer_1a4f3fddf8489a142969604beee4e2ba02" kindref="member">VulkanRenderer::BeginSingleTimeCommands</ref>()</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBufferAllocateInfo<sp/>allocInfo{};</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.level<sp/>=<sp/>VK_COMMAND_BUFFER_LEVEL_PRIMARY;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.commandPool<sp/>=<sp/><ref refid="class_vulkan_renderer_1a89485667c8f0edc91cbc1db315ff5824" kindref="member">CommandPool</ref>;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.commandBufferCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>commandBuffer;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>vkAllocateCommandBuffers(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;allocInfo,<sp/>&amp;commandBuffer);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>TODO<sp/>It<sp/>should<sp/>be<sp/>noted<sp/>that<sp/>in<sp/>a<sp/>real<sp/>world<sp/>application,<sp/>you&apos;re<sp/>not<sp/>supposed<sp/>to<sp/>actually<sp/>call<sp/>vkAllocateMemory<sp/>for<sp/>every<sp/>individual<sp/>buffer.</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>simultaneous<sp/>memory<sp/>allocations<sp/>is<sp/>limited<sp/>by<sp/>the<sp/>maxMemoryAllocationCount<sp/>physical<sp/>device<sp/>limit,<sp/>which<sp/>may<sp/>be<sp/>as<sp/>low<sp/>as</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>4096<sp/>even<sp/>on<sp/>high<sp/>end<sp/>hardware<sp/>like<sp/>an<sp/>NVIDIA<sp/>GTX<sp/>1080.<sp/>The<sp/>right<sp/>way<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>a<sp/>large<sp/>number<sp/>of<sp/>objects<sp/>at<sp/>the<sp/>same<sp/>time<sp/>is<sp/>to</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>create<sp/>a<sp/>custom<sp/>allocator<sp/>that<sp/>splits<sp/>up<sp/>a<sp/>single<sp/>allocation<sp/>among<sp/>many<sp/>different<sp/>objects<sp/>by<sp/>using<sp/>the<sp/>offset<sp/>parameters<sp/>that<sp/>we&apos;ve<sp/>seen<sp/>in<sp/>many</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>functions.</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>You<sp/>can<sp/>either<sp/>implement<sp/>such<sp/>an<sp/>allocator<sp/>yourself,<sp/>or<sp/>use<sp/>the<sp/>VulkanMemoryAllocator<sp/>library<sp/>provided<sp/>by<sp/>the<sp/>GPUOpen<sp/>initiative.</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>However,<sp/>for<sp/>this<sp/>tutorial<sp/>it&apos;s<sp/>okay<sp/>to<sp/>use<sp/>a<sp/>separate<sp/>allocation<sp/>for<sp/>every<sp/>resource,<sp/>because<sp/>we<sp/>won&apos;t<sp/>come<sp/>close<sp/>to<sp/>hitting<sp/>any<sp/>of<sp/>these<sp/>limits<sp/>for<sp/>now.</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBufferBeginInfo<sp/>beginInfo{};</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>beginInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>beginInfo.flags<sp/>=<sp/>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>vkBeginCommandBuffer(commandBuffer,<sp/>&amp;beginInfo);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>commandBuffer;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090" refid="class_vulkan_renderer_1a5521fe3118bc17b3a0e40a33248f3cd9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a5521fe3118bc17b3a0e40a33248f3cd9" kindref="member">VulkanRenderer::EndSingleTimeCommands</ref>(VkCommandBuffer_T*<sp/>commandBuffer)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>vkEndCommandBuffer(commandBuffer);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSubmitInfo<sp/>submitInfo{};</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SUBMIT_INFO;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.commandBufferCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.pCommandBuffers<sp/>=<sp/>&amp;commandBuffer;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>vkQueueSubmit(<ref refid="class_vulkan_renderer_1ae7bd509b429f05d522613d08d85790d1" kindref="member">Queues</ref>.<ref refid="struct_queue_struct_1ae57150fdd38f013b350774f8458f443d" kindref="member">GraphicsQueue</ref>,<sp/>1,<sp/>&amp;submitInfo,<sp/>VK_NULL_HANDLE);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>vkQueueWaitIdle(<ref refid="class_vulkan_renderer_1ae7bd509b429f05d522613d08d85790d1" kindref="member">Queues</ref>.<ref refid="struct_queue_struct_1ae57150fdd38f013b350774f8458f443d" kindref="member">GraphicsQueue</ref>);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeCommandBuffers(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a89485667c8f0edc91cbc1db315ff5824" kindref="member">CommandPool</ref>,<sp/>1,<sp/>&amp;commandBuffer);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105" refid="class_vulkan_renderer_1ac52220627e0cf42c81f16fa8331863b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1ac52220627e0cf42c81f16fa8331863b7" kindref="member">VulkanRenderer::CopyBuffer</ref>(VkBuffer_T*<sp/>srcBuffer,<sp/>VkBuffer_T*<sp/>dstBuffer,<sp/><ref refid="_vulkan_manager_8h_1a990404191b278871ffcc40552a4893ed" kindref="member">VkDeviceSize</ref><sp/>size)</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>commandBuffer<sp/>=<sp/><ref refid="class_vulkan_renderer_1a4f3fddf8489a142969604beee4e2ba02" kindref="member">BeginSingleTimeCommands</ref>();</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBufferCopy<sp/>copyRegion{};</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>copyRegion.size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdCopyBuffer(commandBuffer,<sp/>srcBuffer,<sp/>dstBuffer,<sp/>1,<sp/>&amp;copyRegion);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a5521fe3118bc17b3a0e40a33248f3cd9" kindref="member">EndSingleTimeCommands</ref>(commandBuffer);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117" refid="class_vulkan_renderer_1abe9c0273e7dd404121f9c8fb7d76faec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1abe9c0273e7dd404121f9c8fb7d76faec" kindref="member">VulkanRenderer::FindMemoryType</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>typeFilter,<sp/><ref refid="_vulkan_manager_8h_1a06f71178c68bf5712dbec35d6f124122" kindref="member">VkMemoryPropertyFlags</ref><sp/>properties)</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDeviceMemoryProperties<sp/>memProperties;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceMemoryProperties(<ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref>,<sp/>&amp;memProperties);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>memProperties.memoryTypeCount;<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((typeFilter<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>i))<sp/>&amp;&amp;<sp/>(memProperties.memoryTypes[i].propertyFlags<sp/>&amp;<sp/>properties)<sp/>==<sp/>properties)<sp/></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>suitable<sp/>memory<sp/>type!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133" refid="class_vulkan_renderer_1a1375a54bd3d5f0a58e93624b5ade7c90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a1375a54bd3d5f0a58e93624b5ade7c90" kindref="member">VulkanRenderer::UpdateUniformBuffer</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentImageIndex)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>startTime<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>=<sp/>std::chrono::duration&lt;float,<sp/>std::chrono::seconds::period&gt;(currentTime<sp/>-<sp/>startTime).count();</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_uniform_buffer_object" kindref="compound">UniformBufferObject</ref><sp/>ubo{};</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>ubo.<ref refid="struct_uniform_buffer_object_1aa4668fb0c34142255f72c2464a0499b7" kindref="member">Model</ref>.<ref refid="class_f_matrix4_1acb95284cd2f52015493d164d3197309e" kindref="member">SetToRotationMatrix</ref>(time<sp/>*<sp/>90.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>ubo.View.SetToLookAtMatrix(<ref refid="class_f_vector3" kindref="compound">FVector3</ref>(2.0f,<sp/>2.0f,<sp/>2.0f),<sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>(0.0f,<sp/>0.0f,<sp/>0.0f),<sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>(0.0f,<sp/>0.0f,<sp/>1.0f));</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>ubo.Projection.SetToPerspectiveMatrix(45.0f,<sp/><ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>-&gt;width/(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>-&gt;height,<sp/>0.1f,<sp/>10.0f);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>ubo.Projection[1][1]<sp/>*=<sp/>-1;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ubo);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>vkMapMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1aaaee01b00bfa699f0e76811acafacb57" kindref="member">UniformBuffersMemory</ref>[currentImageIndex],<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ubo),<sp/>0,<sp/>&amp;data);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(data,<sp/>&amp;ubo,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ubo));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>vkUnmapMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1aaaee01b00bfa699f0e76811acafacb57" kindref="member">UniformBuffersMemory</ref>[currentImageIndex]);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153" refid="class_vulkan_renderer_1ae3e0c60837f269920a03e94919f1cf65" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1ae3e0c60837f269920a03e94919f1cf65" kindref="member">VulkanRenderer::FramebufferResizeCallback</ref>()</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a1fd8f51feaed53e9b7c2b3b80f5081bf" kindref="member">FramebufferResized</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="comment">//-----Syncronization------\\</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161" refid="class_vulkan_renderer_1ae7de81fb196883f599da5c830985fbac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1ae7de81fb196883f599da5c830985fbac" kindref="member">VulkanRenderer::CreateSyncObjects</ref>()</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphoreCreateInfo<sp/>semaphoreInfo{};</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>semaphoreInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a68163a3cac5d1ecb79533f04c0516a2a" kindref="member">ImageAvailableSemaphores</ref>.resize(<ref refid="class_vulkan_renderer_1a929e4030de3e2114a12b7d2b55e2a5a9" kindref="member">MAX_FRAMES_IN_FLIGHT</ref>);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a093538346155b7d762565f55306b8398" kindref="member">RenderFinishedSemaphores</ref>.resize(<ref refid="class_vulkan_renderer_1a929e4030de3e2114a12b7d2b55e2a5a9" kindref="member">MAX_FRAMES_IN_FLIGHT</ref>);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFenceCreateInfo<sp/>fenceInfo{};</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>fenceInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>fenceInfo.flags<sp/>=<sp/>VK_FENCE_CREATE_SIGNALED_BIT;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a6aa0458a0e1e89e7a65ba8897defdea4" kindref="member">InFlightFences</ref>.resize(<ref refid="class_vulkan_renderer_1a929e4030de3e2114a12b7d2b55e2a5a9" kindref="member">MAX_FRAMES_IN_FLIGHT</ref>);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a5e82d2d36e586ff6ba3658375a2b744b" kindref="member">ImagesInFlight</ref>.resize(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size(),<sp/>VK_NULL_HANDLE);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_vulkan_renderer_1a929e4030de3e2114a12b7d2b55e2a5a9" kindref="member">MAX_FRAMES_IN_FLIGHT</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCreateSemaphore(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;semaphoreInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a68163a3cac5d1ecb79533f04c0516a2a" kindref="member">ImageAvailableSemaphores</ref>[i])<sp/>!=<sp/>VK_SUCCESS<sp/>||</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCreateSemaphore(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;semaphoreInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a093538346155b7d762565f55306b8398" kindref="member">RenderFinishedSemaphores</ref>[i])<sp/>!=<sp/>VK_SUCCESS<sp/>||</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCreateFence(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;fenceInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a6aa0458a0e1e89e7a65ba8897defdea4" kindref="member">InFlightFences</ref>[i])<sp/>!=<sp/>VK_SUCCESS</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>synchronization<sp/>objects<sp/>for<sp/>a<sp/>frame!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">//-----Rendering------\\</highlight></codeline>
<codeline lineno="1190"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191" refid="class_vulkan_renderer_1a0a3e46121f1fe3ef584bd4c3ab59962e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a0a3e46121f1fe3ef584bd4c3ab59962e" kindref="member">VulkanRenderer::Render</ref>(SDL_Window**<sp/>windowArray,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOfWindows,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arrayOffset)</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>vkWaitForFences(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>1,<sp/>&amp;<ref refid="class_vulkan_renderer_1a6aa0458a0e1e89e7a65ba8897defdea4" kindref="member">InFlightFences</ref>[<ref refid="class_vulkan_renderer_1ad4b1a1d42531e0d37018f5cd04365db8" kindref="member">CurrentFrame</ref>],<sp/>VK_TRUE,<sp/>UINT64_MAX);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>imageIndex;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>swapChainResult<sp/>=<sp/>vkAcquireNextImageKHR(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/><ref refid="class_vulkan_renderer_1a0e7b08136d8e54f064ebd04433c856c5" kindref="member">SwapChain</ref>,<sp/>UINT64_MAX,<sp/><ref refid="class_vulkan_renderer_1a68163a3cac5d1ecb79533f04c0516a2a" kindref="member">ImageAvailableSemaphores</ref>[<ref refid="class_vulkan_renderer_1ad4b1a1d42531e0d37018f5cd04365db8" kindref="member">CurrentFrame</ref>],<sp/>VK_NULL_HANDLE,<sp/>&amp;imageIndex);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapChainResult<sp/>==<sp/>VK_ERROR_OUT_OF_DATE_KHR)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1ac504071c8b88a48f1d14fb3d50e64c7b" kindref="member">RecreateSwapChain</ref>();</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapChainResult<sp/>!=<sp/>VK_SUCCESS<sp/>&amp;&amp;<sp/>swapChainResult<sp/>!=<sp/>VK_SUBOPTIMAL_KHR)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>acquire<sp/>swap<sp/>chain<sp/>image!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>a<sp/>previous<sp/>frame<sp/>is<sp/>using<sp/>this<sp/>image<sp/>(i.e.<sp/>there<sp/>is<sp/>its<sp/>fence<sp/>to<sp/>wait<sp/>on)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a5e82d2d36e586ff6ba3658375a2b744b" kindref="member">ImagesInFlight</ref>[imageIndex]<sp/>!=<sp/>VK_NULL_HANDLE)<sp/>vkWaitForFences(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>1,<sp/>&amp;<ref refid="class_vulkan_renderer_1a5e82d2d36e586ff6ba3658375a2b744b" kindref="member">ImagesInFlight</ref>[imageIndex],<sp/>VK_TRUE,<sp/>UINT64_MAX);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>the<sp/>image<sp/>as<sp/>now<sp/>being<sp/>in<sp/>use<sp/>by<sp/>this<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a5e82d2d36e586ff6ba3658375a2b744b" kindref="member">ImagesInFlight</ref>[imageIndex]<sp/>=<sp/><ref refid="class_vulkan_renderer_1a6aa0458a0e1e89e7a65ba8897defdea4" kindref="member">InFlightFences</ref>[<ref refid="class_vulkan_renderer_1ad4b1a1d42531e0d37018f5cd04365db8" kindref="member">CurrentFrame</ref>];</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a1375a54bd3d5f0a58e93624b5ade7c90" kindref="member">UpdateUniformBuffer</ref>(imageIndex);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSubmitInfo<sp/>submitInfo{};</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SUBMIT_INFO;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore<sp/>waitSemaphores[]<sp/>=<sp/>{<sp/><ref refid="class_vulkan_renderer_1a68163a3cac5d1ecb79533f04c0516a2a" kindref="member">ImageAvailableSemaphores</ref>[<ref refid="class_vulkan_renderer_1ad4b1a1d42531e0d37018f5cd04365db8" kindref="member">CurrentFrame</ref>]<sp/>};</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>waitStages[]<sp/>=<sp/>{<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT<sp/>};</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.waitSemaphoreCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.pWaitSemaphores<sp/>=<sp/>waitSemaphores;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.pWaitDstStageMask<sp/>=<sp/>waitStages;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.commandBufferCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.pCommandBuffers<sp/>=<sp/>&amp;<ref refid="class_vulkan_renderer_1a08492b7d853c48bda5d163883d804a9d" kindref="member">CommandBuffers</ref>[imageIndex];</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore<sp/>signalSemaphores[]<sp/>=<sp/>{<sp/><ref refid="class_vulkan_renderer_1a093538346155b7d762565f55306b8398" kindref="member">RenderFinishedSemaphores</ref>[<ref refid="class_vulkan_renderer_1ad4b1a1d42531e0d37018f5cd04365db8" kindref="member">CurrentFrame</ref>]<sp/>};</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.signalSemaphoreCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.pSignalSemaphores<sp/>=<sp/>signalSemaphores;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>vkResetFences(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>1,<sp/>&amp;<ref refid="class_vulkan_renderer_1a6aa0458a0e1e89e7a65ba8897defdea4" kindref="member">InFlightFences</ref>[<ref refid="class_vulkan_renderer_1ad4b1a1d42531e0d37018f5cd04365db8" kindref="member">CurrentFrame</ref>]);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkQueueSubmit(<ref refid="class_vulkan_renderer_1ae7bd509b429f05d522613d08d85790d1" kindref="member">Queues</ref>.<ref refid="struct_queue_struct_1ae57150fdd38f013b350774f8458f443d" kindref="member">GraphicsQueue</ref>,<sp/>1,<sp/>&amp;submitInfo,<sp/><ref refid="class_vulkan_renderer_1a6aa0458a0e1e89e7a65ba8897defdea4" kindref="member">InFlightFences</ref>[<ref refid="class_vulkan_renderer_1ad4b1a1d42531e0d37018f5cd04365db8" kindref="member">CurrentFrame</ref>])<sp/>!=<sp/>VK_SUCCESS)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>submit<sp/>draw<sp/>command<sp/>buffer!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPresentInfoKHR<sp/>presentInfo{};</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>presentInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>presentInfo.waitSemaphoreCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>presentInfo.pWaitSemaphores<sp/>=<sp/>signalSemaphores;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainKHR<sp/>swapChains[]<sp/>=<sp/>{<sp/><ref refid="class_vulkan_renderer_1a0e7b08136d8e54f064ebd04433c856c5" kindref="member">SwapChain</ref><sp/>};</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>presentInfo.swapchainCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>presentInfo.pSwapchains<sp/>=<sp/>swapChains;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>presentInfo.pImageIndices<sp/>=<sp/>&amp;imageIndex;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>presentInfo.pResults<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>swapChainResult<sp/>=<sp/>vkQueuePresentKHR(<ref refid="class_vulkan_renderer_1ae7bd509b429f05d522613d08d85790d1" kindref="member">Queues</ref>.<ref refid="struct_queue_struct_1ac06590ead8214dbb53306e34ffced65d" kindref="member">PresentationQueue</ref>,<sp/>&amp;presentInfo);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapChainResult<sp/>==<sp/>VK_ERROR_OUT_OF_DATE_KHR<sp/>||<sp/>swapChainResult<sp/>==<sp/>VK_SUBOPTIMAL_KHR<sp/>||<sp/><ref refid="class_vulkan_renderer_1a1fd8f51feaed53e9b7c2b3b80f5081bf" kindref="member">FramebufferResized</ref>)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a1fd8f51feaed53e9b7c2b3b80f5081bf" kindref="member">FramebufferResized</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1ac504071c8b88a48f1d14fb3d50e64c7b" kindref="member">RecreateSwapChain</ref>();</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapChainResult<sp/>!=<sp/>VK_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>acquire<sp/>swap<sp/>chain<sp/>image!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1ad4b1a1d42531e0d37018f5cd04365db8" kindref="member">CurrentFrame</ref><sp/>=<sp/>(<ref refid="class_vulkan_renderer_1ad4b1a1d42531e0d37018f5cd04365db8" kindref="member">CurrentFrame</ref><sp/>+<sp/>1)<sp/>%<sp/><ref refid="class_vulkan_renderer_1a929e4030de3e2114a12b7d2b55e2a5a9" kindref="member">MAX_FRAMES_IN_FLIGHT</ref>;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261" refid="class_vulkan_renderer_1a6e87b2d78d3b388f0d499845246eea81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a6e87b2d78d3b388f0d499845246eea81" kindref="member">VulkanRenderer::CreateDescriptorSetLayout</ref>()</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayoutBinding<sp/>uboLayoutBinding{};</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>uboLayoutBinding.binding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>uboLayoutBinding.descriptorType<sp/>=<sp/>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>uboLayoutBinding.descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>uboLayoutBinding.stageFlags<sp/>=<sp/>VK_SHADER_STAGE_VERTEX_BIT;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>uboLayoutBinding.pImmutableSamplers<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayoutBinding<sp/>samplerLayoutBinding{};</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerLayoutBinding.binding<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerLayoutBinding.descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerLayoutBinding.descriptorType<sp/>=<sp/>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerLayoutBinding.pImmutableSamplers<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerLayoutBinding.stageFlags<sp/>=<sp/>VK_SHADER_STAGE_FRAGMENT_BIT;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;VkDescriptorSetLayoutBinding,<sp/>2&gt;<sp/>bindings<sp/>=<sp/>{<sp/>uboLayoutBinding,<sp/>samplerLayoutBinding<sp/>};</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayoutCreateInfo<sp/>layoutInfo{};</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>layoutInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>layoutInfo.bindingCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bindings.size());</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>layoutInfo.pBindings<sp/>=<sp/>bindings.data();</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateDescriptorSetLayout(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;layoutInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a5dd7349516665b3299a99191698d96a1" kindref="member">DescriptorSetLayout</ref>)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>descriptor<sp/>set<sp/>layout!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289" refid="class_vulkan_renderer_1abb3941e44bfd564b176afed482cbac38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1abb3941e44bfd564b176afed482cbac38" kindref="member">VulkanRenderer::CreateDescriptorPool</ref>()</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;VkDescriptorPoolSize,<sp/>2&gt;<sp/>poolSizes{};</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>poolSizes[0].type<sp/>=<sp/>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>poolSizes[0].descriptorCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size());</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>poolSizes[1].type<sp/>=<sp/>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>poolSizes[1].descriptorCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size());</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPoolCreateInfo<sp/>poolInfo{};</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.poolSizeCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(poolSizes.size());</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.pPoolSizes<sp/>=<sp/>poolSizes.data();</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.maxSets<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size());</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateDescriptorPool(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;poolInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1a90ec637836292e1403a870800072716c" kindref="member">DescriptorPool</ref>)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>descriptor<sp/>pool!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309" refid="class_vulkan_renderer_1a83aecfc9db0274ac1b4f997d2c91c530" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a83aecfc9db0274ac1b4f997d2c91c530" kindref="member">VulkanRenderer::CreateDescriptorSets</ref>()</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VkDescriptorSetLayout&gt;<sp/>layouts(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size(),<sp/><ref refid="class_vulkan_renderer_1a5dd7349516665b3299a99191698d96a1" kindref="member">DescriptorSetLayout</ref>);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetAllocateInfo<sp/>allocInfo{};</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.descriptorPool<sp/>=<sp/><ref refid="class_vulkan_renderer_1a90ec637836292e1403a870800072716c" kindref="member">DescriptorPool</ref>;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.descriptorSetCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size());</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.pSetLayouts<sp/>=<sp/>layouts.data();</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a21da9311dda520c2cf6c2014e34c5dff" kindref="member">DescriptorSets</ref>.resize(<ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size());</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkAllocateDescriptorSets(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;allocInfo,<sp/><ref refid="class_vulkan_renderer_1a21da9311dda520c2cf6c2014e34c5dff" kindref="member">DescriptorSets</ref>.data())<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>allocate<sp/>descriptor<sp/>sets!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_vulkan_renderer_1a396ebfa5c1962c08a552afa4e45422b6" kindref="member">SwapChainImages</ref>.size();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkDescriptorBufferInfo<sp/>bufferInfo{};</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferInfo.buffer<sp/>=<sp/><ref refid="class_vulkan_renderer_1a088b179ef981d1913e3dbe8d7a5e2c58" kindref="member">UniformBuffers</ref>[i];</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferInfo.offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferInfo.range<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_uniform_buffer_object" kindref="compound">UniformBufferObject</ref>);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkDescriptorImageInfo<sp/>imageInfo{};</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageInfo.imageLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageInfo.imageView<sp/>=<sp/><ref refid="class_vulkan_renderer_1a55dedbbb6f2836d4c2b09464ddbda1d5" kindref="member">TextureImageView</ref>;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageInfo.sampler<sp/>=<sp/><ref refid="class_vulkan_renderer_1ad4cd8fb0a2dcaeaf9e5fba93c5a34209" kindref="member">TextureSampler</ref>;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;VkWriteDescriptorSet,<sp/>2&gt;<sp/>descriptorWrites{};</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[0].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[0].dstSet<sp/>=<sp/><ref refid="class_vulkan_renderer_1a21da9311dda520c2cf6c2014e34c5dff" kindref="member">DescriptorSets</ref>[i];</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[0].dstBinding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[0].dstArrayElement<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[0].descriptorType<sp/>=<sp/>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[0].descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[0].pBufferInfo<sp/>=<sp/>&amp;bufferInfo;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[1].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[1].dstSet<sp/>=<sp/><ref refid="class_vulkan_renderer_1a21da9311dda520c2cf6c2014e34c5dff" kindref="member">DescriptorSets</ref>[i];</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[1].dstBinding<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[1].dstArrayElement<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[1].descriptorType<sp/>=<sp/>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[1].descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorWrites[1].pImageInfo<sp/>=<sp/>&amp;imageInfo;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkUpdateDescriptorSets(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(descriptorWrites.size()),<sp/>descriptorWrites.data(),<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360" refid="class_vulkan_renderer_1a591f0b2d09d734586500903ff59ade9c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a591f0b2d09d734586500903ff59ade9c" kindref="member">VulkanRenderer::CreateTextureImage</ref>()</highlight></codeline>
<codeline lineno="1361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>texWidth,<sp/>texHeight,<sp/>texChannels;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_uc*<sp/>pixels<sp/>=<sp/>stbi_load(<ref refid="class_vulkan_renderer_1a23e4f02649ccbb6ef6ae9699a8fa2e80" kindref="member">TEXTURE_PATH</ref>.c_str(),<sp/>&amp;texWidth,<sp/>&amp;texHeight,<sp/>&amp;texChannels,<sp/>STBI_rgb_alpha);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_vulkan_manager_8h_1a990404191b278871ffcc40552a4893ed" kindref="member">VkDeviceSize</ref><sp/>imageSize<sp/>=<sp/>texWidth<sp/>*<sp/>texHeight<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pixels)<sp/></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>texture<sp/>image!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/>stagingBuffer;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>stagingBufferMemory;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a42c04d82c50716168280f8354b6aa54a" kindref="member">CreateBuffer</ref>(imageSize,<sp/>VK_BUFFER_USAGE_TRANSFER_SRC_BIT,<sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT<sp/>|<sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,<sp/>stagingBuffer,<sp/>stagingBufferMemory);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>vkMapMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBufferMemory,<sp/>0,<sp/>imageSize,<sp/>0,<sp/>&amp;data);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(data,<sp/>pixels,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(imageSize));</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>vkUnmapMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBufferMemory);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_image_free(pixels);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a7e1acafb743a63682ac5b3864cccb00f" kindref="member">CreateImage</ref>(texWidth,<sp/>texHeight,<sp/>VK_FORMAT_R8G8B8A8_SRGB,<sp/>VK_IMAGE_TILING_OPTIMAL,<sp/>VK_IMAGE_USAGE_TRANSFER_DST_BIT<sp/>|<sp/>VK_IMAGE_USAGE_SAMPLED_BIT,<sp/>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,<sp/><ref refid="class_vulkan_renderer_1a7e826fe4dc5febcf0417d5a477b162d3" kindref="member">TextureImage</ref>,<sp/><ref refid="class_vulkan_renderer_1a1c6a5eb4cb7bfc2dd0b5039995719331" kindref="member">TextureImageMemory</ref>);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aa573d2ab022bd3263b10c2fc53007d89" kindref="member">TransitionImageLayout</ref>(<ref refid="class_vulkan_renderer_1a7e826fe4dc5febcf0417d5a477b162d3" kindref="member">TextureImage</ref>,<sp/>VK_FORMAT_R8G8B8A8_SRGB,<sp/>VK_IMAGE_LAYOUT_UNDEFINED,<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1ab74f349ccab83735ea51b5e1456013bd" kindref="member">CopyBufferToImage</ref>(stagingBuffer,<sp/><ref refid="class_vulkan_renderer_1a7e826fe4dc5febcf0417d5a477b162d3" kindref="member">TextureImage</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(texWidth),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(texHeight));</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aa573d2ab022bd3263b10c2fc53007d89" kindref="member">TransitionImageLayout</ref>(<ref refid="class_vulkan_renderer_1a7e826fe4dc5febcf0417d5a477b162d3" kindref="member">TextureImage</ref>,<sp/>VK_FORMAT_R8G8B8A8_SRGB,<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyBuffer(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBuffer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>stagingBufferMemory,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392" refid="class_vulkan_renderer_1aee283834978625f9b9c69bf2fb72aa4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1aee283834978625f9b9c69bf2fb72aa4e" kindref="member">VulkanRenderer::CreateTextureImageView</ref>()</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a55dedbbb6f2836d4c2b09464ddbda1d5" kindref="member">TextureImageView</ref><sp/>=<sp/><ref refid="class_vulkan_renderer_1aab85e65b6fae7c31efd893c3967ad7ef" kindref="member">CreateImageView</ref>(<ref refid="class_vulkan_renderer_1a7e826fe4dc5febcf0417d5a477b162d3" kindref="member">TextureImage</ref>,<sp/>VK_FORMAT_R8G8B8A8_SRGB,<sp/>VK_IMAGE_ASPECT_COLOR_BIT);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397" refid="class_vulkan_renderer_1a7e1acafb743a63682ac5b3864cccb00f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a7e1acafb743a63682ac5b3864cccb00f" kindref="member">VulkanRenderer::CreateImage</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>VkFormat<sp/>format,<sp/>VkImageTiling<sp/>tiling,<sp/><ref refid="_vulkan_renderer_8h_1a2c990c0c189d0a9bd02c5d911d5cc5f7" kindref="member">VkImageUsageFlags</ref><sp/>usage,<sp/><ref refid="_vulkan_manager_8h_1a06f71178c68bf5712dbec35d6f124122" kindref="member">VkMemoryPropertyFlags</ref><sp/>properties,<sp/>VkImage_T*&amp;<sp/>image,<sp/>VkDeviceMemory_T*&amp;<sp/>imageMemory)</highlight></codeline>
<codeline lineno="1398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageCreateInfo<sp/>imageInfo{};</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.imageType<sp/>=<sp/>VK_IMAGE_TYPE_2D;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.extent.width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.extent.height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.extent.depth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.mipLevels<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.arrayLayers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.format<sp/>=<sp/>format;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.tiling<sp/>=<sp/>tiling;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.usage<sp/>=<sp/>usage;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.samples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>imageInfo.sharingMode<sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateImage(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;imageInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;image)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>image!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>VkMemoryRequirements<sp/>memRequirements;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetImageMemoryRequirements(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>image,<sp/>&amp;memRequirements);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>VkMemoryAllocateInfo<sp/>allocInfo{};</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.allocationSize<sp/>=<sp/>memRequirements.size;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo.memoryTypeIndex<sp/>=<sp/><ref refid="class_vulkan_renderer_1abe9c0273e7dd404121f9c8fb7d76faec" kindref="member">FindMemoryType</ref>(memRequirements.memoryTypeBits,<sp/>properties);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkAllocateMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;allocInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;imageMemory)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>allocate<sp/>image<sp/>memory!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>vkBindImageMemory(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>image,<sp/>imageMemory,<sp/>0);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435" refid="class_vulkan_renderer_1aa573d2ab022bd3263b10c2fc53007d89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1aa573d2ab022bd3263b10c2fc53007d89" kindref="member">VulkanRenderer::TransitionImageLayout</ref>(VkImage_T*<sp/>image,<sp/>VkFormat<sp/>format,<sp/>VkImageLayout<sp/>oldLayout,<sp/>VkImageLayout<sp/>newLayout)</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>commandBuffer<sp/>=<sp/><ref refid="class_vulkan_renderer_1a4f3fddf8489a142969604beee4e2ba02" kindref="member">BeginSingleTimeCommands</ref>();</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageMemoryBarrier<sp/>barrier{};</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.oldLayout<sp/>=<sp/>oldLayout;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.newLayout<sp/>=<sp/>newLayout;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.srcQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.dstQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.image<sp/>=<sp/>image;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.subresourceRange.baseMipLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.subresourceRange.levelCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.subresourceRange.baseArrayLayer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>barrier.subresourceRange.layerCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newLayout<sp/>==<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL)</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier.subresourceRange.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_DEPTH_BIT;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vulkan_renderer_1a1ebe1b9462ab28d5ca30a560770998e3" kindref="member">HasStencilComponent</ref>(format))</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier.subresourceRange.aspectMask<sp/>|=<sp/>VK_IMAGE_ASPECT_STENCIL_BIT;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier.subresourceRange.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_COLOR_BIT;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>sourceStage;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>destinationStage;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldLayout<sp/>==<sp/>VK_IMAGE_LAYOUT_UNDEFINED<sp/>&amp;&amp;<sp/>newLayout<sp/>==<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL)<sp/></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier.srcAccessMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier.dstAccessMask<sp/>=<sp/>VK_ACCESS_TRANSFER_WRITE_BIT;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourceStage<sp/>=<sp/>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destinationStage<sp/>=<sp/>VK_PIPELINE_STAGE_TRANSFER_BIT;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldLayout<sp/>==<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL<sp/>&amp;&amp;<sp/>newLayout<sp/>==<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL)<sp/></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier.srcAccessMask<sp/>=<sp/>VK_ACCESS_TRANSFER_WRITE_BIT;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier.dstAccessMask<sp/>=<sp/>VK_ACCESS_SHADER_READ_BIT;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourceStage<sp/>=<sp/>VK_PIPELINE_STAGE_TRANSFER_BIT;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destinationStage<sp/>=<sp/>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldLayout<sp/>==<sp/>VK_IMAGE_LAYOUT_UNDEFINED<sp/>&amp;&amp;<sp/>newLayout<sp/>==<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL)<sp/></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier.srcAccessMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrier.dstAccessMask<sp/>=<sp/>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT<sp/>|<sp/>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourceStage<sp/>=<sp/>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destinationStage<sp/>=<sp/>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>layout<sp/>transition!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdPipelineBarrier(commandBuffer,<sp/>sourceStage,<sp/>destinationStage,<sp/>0,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>1,<sp/>&amp;barrier);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a5521fe3118bc17b3a0e40a33248f3cd9" kindref="member">EndSingleTimeCommands</ref>(commandBuffer);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502" refid="class_vulkan_renderer_1ab74f349ccab83735ea51b5e1456013bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1ab74f349ccab83735ea51b5e1456013bd" kindref="member">VulkanRenderer::CopyBufferToImage</ref>(VkBuffer_T*<sp/>buffer,<sp/>VkImage_T*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>commandBuffer<sp/>=<sp/><ref refid="class_vulkan_renderer_1a4f3fddf8489a142969604beee4e2ba02" kindref="member">BeginSingleTimeCommands</ref>();</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBufferImageCopy<sp/>region{};</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>region.bufferOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>region.bufferRowLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>region.bufferImageHeight<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>region.imageSubresource.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_COLOR_BIT;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>region.imageSubresource.mipLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>region.imageSubresource.baseArrayLayer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>region.imageSubresource.layerCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>region.imageOffset<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>region.imageExtent<sp/>=<sp/>{<sp/>width,<sp/>height,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdCopyBufferToImage(<sp/>commandBuffer,<sp/>buffer,<sp/>image,<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,<sp/>1,<sp/>&amp;region<sp/>);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a5521fe3118bc17b3a0e40a33248f3cd9" kindref="member">EndSingleTimeCommands</ref>(commandBuffer);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524" refid="class_vulkan_renderer_1a5e1fb50c654f1cee24c7786b939dc8dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a5e1fb50c654f1cee24c7786b939dc8dd" kindref="member">VulkanRenderer::CreateTextureSampler</ref>()</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSamplerCreateInfo<sp/>samplerInfo{};</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.magFilter<sp/>=<sp/>VK_FILTER_LINEAR;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.minFilter<sp/>=<sp/>VK_FILTER_LINEAR;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.addressModeU<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.addressModeV<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.addressModeW<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.anisotropyEnable<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.maxAnisotropy<sp/>=<sp/>16.0f;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.borderColor<sp/>=<sp/>VK_BORDER_COLOR_INT_OPAQUE_BLACK;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.unnormalizedCoordinates<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.compareEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.compareOp<sp/>=<sp/>VK_COMPARE_OP_ALWAYS;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.mipmapMode<sp/>=<sp/>VK_SAMPLER_MIPMAP_MODE_LINEAR;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.mipLodBias<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.minLod<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerInfo.maxLod<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vkCreateSampler(<ref refid="class_vulkan_renderer_1ab94b780bda1492819006c0ab36fcd93e" kindref="member">LogicalDevice</ref>,<sp/>&amp;samplerInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_vulkan_renderer_1ad4cd8fb0a2dcaeaf9e5fba93c5a34209" kindref="member">TextureSampler</ref>)<sp/>!=<sp/>VK_SUCCESS)<sp/></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>texture<sp/>sampler!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550" refid="class_vulkan_renderer_1a660660e9dcf36dcadd1e338c078a4a3e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a660660e9dcf36dcadd1e338c078a4a3e" kindref="member">VulkanRenderer::CreateDepthResources</ref>()</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/>depthFormat<sp/>=<sp/><ref refid="class_vulkan_renderer_1a5fc174a63a78b24ce7299518cfd5d37f" kindref="member">FindDepthFormat</ref>();</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a7e1acafb743a63682ac5b3864cccb00f" kindref="member">CreateImage</ref>(<ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>-&gt;width,<sp/><ref refid="class_vulkan_renderer_1aab12598732d3fef562e7e7e9775f2b97" kindref="member">SwapChainExtent</ref>-&gt;height,<sp/>depthFormat,<sp/>VK_IMAGE_TILING_OPTIMAL,<sp/>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,<sp/>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,<sp/><ref refid="class_vulkan_renderer_1a761518526442951cde32bac9a992aa85" kindref="member">DepthImage</ref>,<sp/><ref refid="class_vulkan_renderer_1a9656767a9d374a7c05bc37dc37002a06" kindref="member">DepthImageMemory</ref>);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1afc22fdf02bae5261782729828b7e13c6" kindref="member">DepthImageView</ref><sp/>=<sp/><ref refid="class_vulkan_renderer_1aab85e65b6fae7c31efd893c3967ad7ef" kindref="member">CreateImageView</ref>(<ref refid="class_vulkan_renderer_1a761518526442951cde32bac9a992aa85" kindref="member">DepthImage</ref>,<sp/>depthFormat,<sp/>VK_IMAGE_ASPECT_DEPTH_BIT);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aa573d2ab022bd3263b10c2fc53007d89" kindref="member">TransitionImageLayout</ref>(<ref refid="class_vulkan_renderer_1a761518526442951cde32bac9a992aa85" kindref="member">DepthImage</ref>,<sp/>depthFormat,<sp/>VK_IMAGE_LAYOUT_UNDEFINED,<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559" refid="class_vulkan_renderer_1a53a9eaa6262890b3d74016cb625f3705" refkind="member"><highlight class="normal">VkFormat<sp/><ref refid="class_vulkan_renderer_1a53a9eaa6262890b3d74016cb625f3705" kindref="member">VulkanRenderer::FindSupportedFormat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;VkFormat&gt;&amp;<sp/>candidates,<sp/>VkImageTiling<sp/>tiling,<sp/><ref refid="_vulkan_renderer_8h_1a8f6c3cb203ed2eabe1f2093bf9c6352a" kindref="member">VkFormatFeatureFlags</ref><sp/>features)</highlight></codeline>
<codeline lineno="1560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(VkFormat<sp/>format<sp/>:<sp/>candidates)<sp/></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkFormatProperties<sp/>props;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceFormatProperties(<ref refid="class_vulkan_renderer_1af1481e3d0f9f5f6bec36fcf6bb0818fe" kindref="member">PhysicalDevice</ref>,<sp/>format,<sp/>&amp;props);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tiling<sp/>==<sp/>VK_IMAGE_TILING_LINEAR<sp/>&amp;&amp;<sp/>(props.linearTilingFeatures<sp/>&amp;<sp/>features)<sp/>==<sp/>features)</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tiling<sp/>==<sp/>VK_IMAGE_TILING_OPTIMAL<sp/>&amp;&amp;<sp/>(props.optimalTilingFeatures<sp/>&amp;<sp/>features)<sp/>==<sp/>features)</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>supported<sp/>format!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579" refid="class_vulkan_renderer_1a5fc174a63a78b24ce7299518cfd5d37f" refkind="member"><highlight class="normal">VkFormat<sp/><ref refid="class_vulkan_renderer_1a5fc174a63a78b24ce7299518cfd5d37f" kindref="member">VulkanRenderer::FindDepthFormat</ref>()</highlight></codeline>
<codeline lineno="1580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a53a9eaa6262890b3d74016cb625f3705" kindref="member">FindSupportedFormat</ref>({VK_FORMAT_D32_SFLOAT,<sp/>VK_FORMAT_D32_SFLOAT_S8_UINT,<sp/>VK_FORMAT_D24_UNORM_S8_UINT},<sp/>VK_IMAGE_TILING_OPTIMAL,<sp/>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584" refid="class_vulkan_renderer_1a1ebe1b9462ab28d5ca30a560770998e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1a1ebe1b9462ab28d5ca30a560770998e3" kindref="member">VulkanRenderer::HasStencilComponent</ref>(VkFormat<sp/>format)</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format<sp/>==<sp/>VK_FORMAT_D32_SFLOAT_S8_UINT<sp/>||<sp/>format<sp/>==<sp/>VK_FORMAT_D24_UNORM_S8_UINT;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589" refid="class_vulkan_renderer_1acee28fbd6d1c75f49744e9b526db48d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vulkan_renderer_1acee28fbd6d1c75f49744e9b526db48d6" kindref="member">VulkanRenderer::LoadModel</ref>()</highlight></codeline>
<codeline lineno="1590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>tinyobj::attrib_t<sp/>attrib;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;tinyobj::shape_t&gt;<sp/>shapes;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;tinyobj::material_t&gt;<sp/>materials;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>warn,<sp/>err;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tinyobj::LoadObj(&amp;attrib,<sp/>&amp;shapes,<sp/>&amp;materials,<sp/>&amp;warn,<sp/>&amp;err,<sp/><ref refid="class_vulkan_renderer_1a603050e34126f9be91dff7c3810776c0" kindref="member">MODEL_PATH</ref>.c_str()))<sp/></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(warn<sp/>+<sp/>err);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;Vertex,<sp/>uint32_t&gt;<sp/>uniqueVertices{};</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>:<sp/>shapes)<sp/></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>index<sp/>:<sp/>shape.mesh.indices)<sp/></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>vertex<sp/>=<sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref>();</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex.<ref refid="struct_vertex_1a60d0d2933a57c7274e40ad66ad0e0e60" kindref="member">Position</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attrib.vertices[3<sp/>*<sp/>index.vertex_index<sp/>+<sp/>0],</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attrib.vertices[3<sp/>*<sp/>index.vertex_index<sp/>+<sp/>1],</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attrib.vertices[3<sp/>*<sp/>index.vertex_index<sp/>+<sp/>2]</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex.<ref refid="struct_vertex_1a7380194747f3d97e3fd519076953e5af" kindref="member">TextureCoordinates</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attrib.texcoords[2<sp/>*<sp/>index.texcoord_index<sp/>+<sp/>0],</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0f<sp/>-<sp/>attrib.texcoords[2<sp/>*<sp/>index.texcoord_index<sp/>+<sp/>1],</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(uniqueVertices.count(vertex)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniqueVertices[vertex]<sp/>=<sp/>static_cast&lt;uint32_t&gt;(Vertices.size());</highlight></codeline>
<codeline lineno="1626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vertices.push_back(vertex);</highlight></codeline>
<codeline lineno="1627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Indices.push_back(uniqueVertices[vertex]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1a11fad42b69d92aa388129f5e0ff69d1a" kindref="member">Vertices</ref>.push_back(vertex);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vulkan_renderer_1aa35df30304dfa46c24befa95dca12a2a" kindref="member">Indices</ref>.push_back(<ref refid="class_vulkan_renderer_1aa35df30304dfa46c24befa95dca12a2a" kindref="member">Indices</ref>.size());</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment">//---Swap-Chain-Support-Details---\\</highlight></codeline>
<codeline lineno="1637"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal">VkSurfaceCapabilitiesKHR*<sp/><ref refid="struct_swapchain_support_details_1ac57e2a303d193fe782fe5fb1b2fd8802" kindref="member">SwapchainSupportDetails::InitializeCapabilities</ref>()</highlight></codeline>
<codeline lineno="1639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VkSurfaceCapabilitiesKHR();</highlight></codeline>
<codeline lineno="1641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643" refid="struct_vertex_1a449afaf47ed71b80e7c10ac6f0b741c0" refkind="member"><highlight class="normal">VkVertexInputBindingDescription<sp/><ref refid="struct_vertex_1a449afaf47ed71b80e7c10ac6f0b741c0" kindref="member">Vertex::GetBindingDescription</ref>()</highlight></codeline>
<codeline lineno="1644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>VkVertexInputBindingDescription<sp/>bindingDescription{};</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>bindingDescription.binding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>bindingDescription.stride<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vertex" kindref="compound">Vertex</ref>);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>bindingDescription.inputRate<sp/>=<sp/>VK_VERTEX_INPUT_RATE_VERTEX;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bindingDescription;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653" refid="struct_vertex_1aa8d2c95c96d38a222b02f7841f00c51b" refkind="member"><highlight class="normal">std::array&lt;VkVertexInputAttributeDescription,<sp/>2&gt;<sp/><ref refid="struct_vertex_1aa8d2c95c96d38a222b02f7841f00c51b" kindref="member">Vertex::GetAttributeDescriptions</ref>()</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;VkVertexInputAttributeDescription,<sp/>2&gt;<sp/>attributeDescriptions{};</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[0].binding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[0].location<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[0].format<sp/>=<sp/>VK_FORMAT_R32G32B32_SFLOAT;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[0].offset<sp/>=<sp/>offsetof(<ref refid="struct_vertex" kindref="compound">Vertex</ref>,<sp/><ref refid="struct_vertex_1a60d0d2933a57c7274e40ad66ad0e0e60" kindref="member">Position</ref>);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[1].binding<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[1].location<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[1].format<sp/>=<sp/>VK_FORMAT_R32G32B32_SFLOAT;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>attributeDescriptions[1].offset<sp/>=<sp/>offsetof(<ref refid="struct_vertex" kindref="compound">Vertex</ref>,<sp/><ref refid="struct_vertex_1a7380194747f3d97e3fd519076953e5af" kindref="member">TextureCoordinates</ref>);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attributeDescriptions;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670" refid="struct_vertex_1a80a54a84866d511b63bcc6f38899bed9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_vertex_1a80a54a84866d511b63bcc6f38899bed9" kindref="member">Vertex::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vertex" kindref="compound">Vertex</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1671"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_vertex_1a60d0d2933a57c7274e40ad66ad0e0e60" kindref="member">Position</ref><sp/>==<sp/>other.<ref refid="struct_vertex_1a60d0d2933a57c7274e40ad66ad0e0e60" kindref="member">Position</ref><sp/>&amp;&amp;<sp/><ref refid="struct_vertex_1a7380194747f3d97e3fd519076953e5af" kindref="member">TextureCoordinates</ref><sp/>==<sp/>other.<ref refid="struct_vertex_1a7380194747f3d97e3fd519076953e5af" kindref="member">TextureCoordinates</ref>;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanRenderer.cpp"/>
  </compounddef>
</doxygen>
