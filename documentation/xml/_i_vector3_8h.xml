<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_i_vector3_8h" kind="file" language="C++">
    <compoundname>IVector3.h</compoundname>
    <includedby refid="_i_vector3_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/IVector3.cpp</includedby>
    <invincdepgraph>
      <node id="2">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/IVector3.cpp</label>
        <link refid="_i_vector3_8cpp"/>
      </node>
      <node id="1">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/IVector3.h</label>
        <link refid="_i_vector3_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_i_vector3" prot="public">IVector3</innerclass>
    <innerclass refid="struct_h_a_s_h___f_vector3" prot="public">HASH_FVector3</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>IVector3_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IVector3_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_f_quaternion" kindref="compound">FQuaternion</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="class_i_vector3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_i_vector3" kindref="compound">IVector3</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Array<sp/>containing<sp/>Vector<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="class_i_vector3_1a37a98a539596d80e880397bbed675ba7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a37a98a539596d80e880397bbed675ba7" kindref="member">X</ref>,<sp/><ref refid="class_i_vector3_1a38a6b53e8648c7363ed25b15f5093304" kindref="member">Y</ref>,<sp/><ref refid="class_i_vector3_1a608303f8ad7ecdc2dc5597caf450e224" kindref="member">Z</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>using<sp/>initial<sp/>values<sp/>for<sp/>each<sp/>component.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3_1ad01bf3592ffc2ce890aa3bb12e60195f" kindref="member">IVector3</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>initializing<sp/>all<sp/>components<sp/>to<sp/>a<sp/>single<sp/>int<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3_1ad01bf3592ffc2ce890aa3bb12e60195f" kindref="member">IVector3</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>initializing<sp/>to<sp/>match<sp/>a<sp/>given<sp/>IVector3,<sp/>a<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3_1ad01bf3592ffc2ce890aa3bb12e60195f" kindref="member">IVector3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Contructor<sp/>initalizaing<sp/>to<sp/>match<sp/>given<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3_1ad01bf3592ffc2ce890aa3bb12e60195f" kindref="member">IVector3</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values[3]);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Default<sp/>Constructor,<sp/>initializes<sp/>all<sp/>values<sp/>to<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3_1ad01bf3592ffc2ce890aa3bb12e60195f" kindref="member">IVector3</ref>();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3_1a3cbe840c3535681918e9496a0504baa2" kindref="member">~IVector3</ref>();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1a1b794443e4abdccf950f55642afeade9" kindref="member">operator+ </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;+&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>plus<sp/>vector<sp/>addition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_i_vector3_1a31dbc17e85cf0b290921d1424653e177" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1a1b794443e4abdccf950f55642afeade9" kindref="member">operator+ </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1a175eea13c1c671883af134b04b74456f" kindref="member">operator- </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;-&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>minus<sp/>vector<sp/>subtraction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="class_i_vector3_1a0b395b272069023080cde019ae9d26b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1a175eea13c1c671883af134b04b74456f" kindref="member">operator- </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1ad43cc94827ff6b7cad9afe40db47f3ac" kindref="member">operator* </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>multiplier)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;*&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>times<sp/>scalar<sp/>multiplication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1a119698c4f09e50b2dade005eecfa3524" kindref="member">operator/ </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divisor)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;/&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>divided<sp/>by<sp/>scalar<sp/>division.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1ad43cc94827ff6b7cad9afe40db47f3ac" kindref="member">operator* </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;*&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>times<sp/>vector<sp/>dot<sp/>product.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_i_vector3_1a33f84fd423f625d460d0eb133e74efc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1ad43cc94827ff6b7cad9afe40db47f3ac" kindref="member">operator* </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>*<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1ac96b863e45f117fd856ea345c9623f13" kindref="member">operator= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector);</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;=&quot;<sp/>operator,<sp/>makes<sp/>each<sp/>component<sp/>of<sp/>the<sp/>vector<sp/>equal<sp/>to<sp/>the<sp/>equivalent<sp/>component<sp/>of<sp/>a<sp/>given<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="class_i_vector3_1a0d4ec2188dc71d9ded6739defd63ec6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1ac96b863e45f117fd856ea345c9623f13" kindref="member">operator= </ref>(<ref refid="class_i_vector3" kindref="compound">IVector3</ref>*<sp/>vector)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1ac96b863e45f117fd856ea345c9623f13" kindref="member">operator= </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values[3]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a939938c1e60176e5b5155c7993db6831" kindref="member">operator+= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector);</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;+=&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>plus<sp/>vector<sp/>addition<sp/>changing<sp/>the<sp/>current<sp/>vector<sp/>to<sp/>equal<sp/>to<sp/>sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_i_vector3_1ae43409899a3cb0598bb8f93a48a9a2d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a939938c1e60176e5b5155c7993db6831" kindref="member">operator+= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>*&amp;<sp/>vector)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+=<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a1e1fc32327c4a503ff774e3681ce916e" kindref="member">operator-= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector);</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;-=&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>minus<sp/>vector<sp/>subtraction.<sp/>changing<sp/>the<sp/>current<sp/>vector<sp/>to<sp/>equal<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_i_vector3_1ad0e23771a5b21f7e75322b7b3ac263e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a1e1fc32327c4a503ff774e3681ce916e" kindref="member">operator-= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>*&amp;<sp/>vector)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-=<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a0cc69a06d4da4961d9baeed39ce371fa" kindref="member">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;==&quot;<sp/>operator,<sp/>returns<sp/>the<sp/>boolean<sp/>value<sp/>of<sp/>equal<sp/>to<sp/>between<sp/>two<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_i_vector3_1ad78b761873f6ad218159383677193893" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a0cc69a06d4da4961d9baeed39ce371fa" kindref="member">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_i_vector3_1a0ddd9b8fcdde2382d9f68a5fc7fb2876" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a0ddd9b8fcdde2382d9f68a5fc7fb2876" kindref="member">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>vector);<sp/>}</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;!=&quot;<sp/>operator,<sp/>returns<sp/>the<sp/>boolean<sp/>value<sp/>of<sp/>not<sp/>equal<sp/>to<sp/>between<sp/>two<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="class_i_vector3_1a5ec18d4fb005a1ea3e80e028e5cd03d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a0ddd9b8fcdde2382d9f68a5fc7fb2876" kindref="member">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>*vector);<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_i_vector3_1a757d873606430b7c7cedab5d7b5a9ab7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a757d873606430b7c7cedab5d7b5a9ab7" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(&amp;<ref refid="class_i_vector3_1a37a98a539596d80e880397bbed675ba7" kindref="member">X</ref><sp/>+<sp/>index);<sp/>}</highlight><highlight class="comment">//For<sp/>R-values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="class_i_vector3_1a7f65af9f4864e013c0b37b6ab6b2f8b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><ref refid="class_i_vector3_1a757d873606430b7c7cedab5d7b5a9ab7" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">*(&amp;<ref refid="class_i_vector3_1a37a98a539596d80e880397bbed675ba7" kindref="member">X</ref><sp/>+<sp/>index);<sp/>}</highlight><highlight class="comment">//For<sp/>L-Values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="class_i_vector3_1a16ef53d116ddd26143505ad229cfb5a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="class_i_vector3_1a37a98a539596d80e880397bbed675ba7" kindref="member">X</ref>);<sp/>}</highlight><highlight class="comment">//For<sp/>R-Values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="class_i_vector3_1a5d2ea45bb81e2ac814943761a1c689f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="class_i_vector3_1a37a98a539596d80e880397bbed675ba7" kindref="member">X</ref>);<sp/>}</highlight><highlight class="comment">//For<sp/>L-Values</highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//Returns<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>Vector<sp/>(or<sp/>Vector&apos;s<sp/>scalar<sp/>lenght)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a3caf0bf02266e2bffb6d9a2d94f26990" kindref="member">Length</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>angle<sp/>between<sp/>this<sp/>vector<sp/>and<sp/>another<sp/>given<sp/>vector<sp/>in<sp/>degrees.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a76a0b31947822341fcd4fe3dcb0cc0fd" kindref="member">GetAngle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inRadians<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82" refid="class_i_vector3_1afe61989ae7c7f9f1273084924f105f9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1afe61989ae7c7f9f1273084924f105f9d" kindref="member">GetAngle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>*&amp;<sp/>vector,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inRadians<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1afe61989ae7c7f9f1273084924f105f9d" kindref="member">GetAngle</ref>(*vector,<sp/>inRadians);<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>cross<sp/>product<sp/>between<sp/>this<sp/>vector<sp/>and<sp/>another<sp/>given<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1ad6afcab9904b39a1fa99150f4eb8522f" kindref="member">CrossProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector);</highlight></codeline>
<codeline lineno="86" refid="class_i_vector3_1a49ded5458631a1e123ddbcc97ff92b0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1a49ded5458631a1e123ddbcc97ff92b0b" kindref="member">CrossProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>*&amp;<sp/>vector)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a49ded5458631a1e123ddbcc97ff92b0b" kindref="member">CrossProduct</ref>(*vector);<sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Gets<sp/>the<sp/>normalized<sp/>form<sp/>of<sp/>this<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1a993cc1d5c2b9375684bf3c74de0f5c9e" kindref="member">GetNormal</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Divides<sp/>the<sp/>vector<sp/>by<sp/>its<sp/>Magnitude<sp/>to<sp/>get<sp/>the<sp/>normalized<sp/>unit<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a050b906d0c2d30d7981a28790d05a4bb" kindref="member">Normalize</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Rotates<sp/>the<sp/>vector<sp/>by<sp/>a<sp/>quarternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1aba676ea1012f72d0e95edbfb80fc197c" kindref="member">Rotate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_quaternion" kindref="compound">FQuaternion</ref>&amp;<sp/>rotation);</highlight></codeline>
<codeline lineno="96" refid="class_i_vector3_1abecff87e1876020428705ef974a97ee3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1abecff87e1876020428705ef974a97ee3" kindref="member">Rotate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_quaternion" kindref="compound">FQuaternion</ref>*&amp;<sp/>rotation)<sp/>{<sp/><ref refid="class_i_vector3_1abecff87e1876020428705ef974a97ee3" kindref="member">Rotate</ref>(*rotation);<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>rotated<sp/>form<sp/>of<sp/>the<sp/>vector<sp/>given<sp/>a<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1a03a98a91df5361634b68454e2490a34e" kindref="member">GetRotatedVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_quaternion" kindref="compound">FQuaternion</ref>&amp;<sp/>rotation)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100" refid="class_i_vector3_1a656869199ac223c280ad49d1ca13abef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref><sp/><ref refid="class_i_vector3_1a656869199ac223c280ad49d1ca13abef" kindref="member">GetRotatedVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_quaternion" kindref="compound">FQuaternion</ref>*&amp;<sp/>rotation)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a656869199ac223c280ad49d1ca13abef" kindref="member">GetRotatedVector</ref>(*rotation);<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Utility<sp/>to<sp/>populate<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1a5b14b2665c382a01e4360e2ec1cc15c7" kindref="member">Load</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3_1ab65f839a27256f425f98edf5eecea452" kindref="member">Print</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal">};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_h_a_s_h___f_vector3" kindref="compound">HASH_FVector3</ref></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_h_a_s_h___f_vector3_1a6c01ea6bbb901393cf507f2abbac2d41" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector3" kindref="compound">IVector3</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/IVector3.h"/>
  </compounddef>
</doxygen>
