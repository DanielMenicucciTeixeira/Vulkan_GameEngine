<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_collision_component_8cpp" kind="file" language="C++">
    <compoundname>CollisionComponent.cpp</compoundname>
    <includes refid="_collision_component_8h" local="yes">CollisionComponent.h</includes>
    <includes refid="_ray_8h" local="yes">Geometry/Ray.h</includes>
    <includes refid="_sphere_8h" local="yes">Geometry/Sphere.h</includes>
    <includes refid="_box_8h" local="yes">Geometry/Box.h</includes>
    <includes refid="_plane_8h" local="yes">Geometry/Plane.h</includes>
    <includes refid="_f_vector3_8h" local="yes">Math/FVector3.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes refid="_box_collider_8h" local="yes">BoxCollider.h</includes>
    <includes refid="_game_object_8h" local="yes">Objects\GameObjects\GameObject.h</includes>
    <includes refid="_level_8h" local="yes">Level.h</includes>
    <includes refid="_level_graph_8h" local="yes">LevelGraph.h</includes>
    <includes refid="_oct_spatial_partition_8h" local="yes">OctSpatialPartition.h</includes>
    <includes refid="_camera_component_8h" local="yes">../CameraComponent.h</includes>
    <incdepgraph>
      <node id="25">
        <label>../Engine/Objects/GameObjects/GameObject.h</label>
      </node>
      <node id="23">
        <label>Core/DebugLogger.h</label>
        <link refid="_debug_logger_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Level.h</label>
        <link refid="_level_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>LevelGraph.h</label>
        <link refid="_level_graph_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>OctSpatialPartition.h</label>
        <link refid="_oct_spatial_partition_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Geometry/Box.h</label>
        <link refid="_box_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Geometry/BoxBounds.h</label>
        <link refid="_box_bounds_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Plane.h</label>
        <link refid="_plane_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Geometry/Ray.h</label>
        <link refid="_ray_8h"/>
      </node>
      <node id="11">
        <label>Geometry/Simplex.h</label>
        <link refid="_simplex_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Geometry/Sphere.h</label>
        <link refid="_sphere_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>../Math/FMatrix.h</label>
        <link refid="_f_matrix_8h"/>
      </node>
      <node id="31">
        <label>../Math/FMatrix4.h</label>
        <link refid="_f_matrix4_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>../Math/FTransform.h</label>
        <link refid="_f_transform_8h"/>
      </node>
      <node id="10">
        <label>../Math/FVector3.h</label>
        <link refid="_f_vector3_8h"/>
      </node>
      <node id="12">
        <label>../Math/FVector4.h</label>
        <link refid="_f_vector4_8h"/>
      </node>
      <node id="39">
        <label>../CameraComponent.h</label>
        <link refid="_camera_component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>BoxCollider.h</label>
        <link refid="_box_collider_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Objects/Components/Colliders/CollisionComponent.cpp</label>
        <link refid="_collision_component_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>CollisionComponent.h</label>
        <link refid="_collision_component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Component.h</label>
        <link refid="_component_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../TransformComponent.h</label>
        <link refid="_transform_component_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Objects\GameObjects\GameObject.h</label>
        <link refid="_game_object_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>../Object.h</label>
        <link refid="_object_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Physics/CollisionData.h</label>
        <link refid="_collision_data_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Renderers/Materials/Material.h</label>
        <link refid="_material_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Renderers/RenderObject.h</label>
        <link refid="_render_object_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>UniformBufferObject.h</label>
        <link refid="_uniform_buffer_object_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>Vertex.h</label>
        <link refid="_vertex_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>SDL_image.h</label>
      </node>
      <node id="14">
        <label>array</label>
      </node>
      <node id="19">
        <label>cmath</label>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="30">
        <label>map</label>
      </node>
      <node id="29">
        <label>memory</label>
      </node>
      <node id="6">
        <label>set</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="27">
        <label>unordered_map</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_collision_component_8h" kindref="compound">CollisionComponent.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_ray_8h" kindref="compound">Geometry/Ray.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_sphere_8h" kindref="compound">Geometry/Sphere.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_box_8h" kindref="compound">Geometry/Box.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_plane_8h" kindref="compound">Geometry/Plane.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_f_vector3_8h" kindref="compound">Math/FVector3.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_box_collider_8h" kindref="compound">BoxCollider.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_game_object_8h" kindref="compound">Objects\GameObjects\GameObject.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_level_8h" kindref="compound">Level.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_level_graph_8h" kindref="compound">LevelGraph.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_oct_spatial_partition_8h" kindref="compound">OctSpatialPartition.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../CameraComponent.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_c___collision_component_1a9067fbcd8d85b74cfa1f0212a3a17d1b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a9067fbcd8d85b74cfa1f0212a3a17d1b" kindref="member">C_CollisionComponent::RayBoxCollision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_ray" kindref="compound">Ray</ref>&amp;<sp/>ray,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_box" kindref="compound">Box</ref>&amp;<sp/>box,<sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>collisionPoints[2],<sp/><ref refid="struct_s___collision_data" kindref="compound">S_CollisionData</ref>&amp;<sp/>data,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stopAtFirstCollision)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_ray" kindref="compound">Ray</ref><sp/>line<sp/>=<sp/>ray;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>interssection[6];</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>plane<sp/>:<sp/>box.<ref refid="class_box_1ac02608b590cef9d8f83d96a55fc8971f" kindref="member">box</ref>)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plane.InterssectionPoint(line,<sp/>interssection[i])<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interssection[i].<ref refid="class_f_vector3_1aa6655e85376fd79f5e0b0fd89ba0258e" kindref="member">X</ref><sp/>&lt;=<sp/>box.<ref refid="class_box_1a68f253f0fe77b3e27e5de0f37b17814b" kindref="member">GetExtent</ref>().<ref refid="class_f_vector3_1aa6655e85376fd79f5e0b0fd89ba0258e" kindref="member">X</ref><sp/>&amp;&amp;<sp/>interssection[i].<ref refid="class_f_vector3_1aa6655e85376fd79f5e0b0fd89ba0258e" kindref="member">X</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interssection[i].<ref refid="class_f_vector3_1a10ba3ed47b315d00151e218878a3f1b9" kindref="member">Y</ref><sp/>&lt;=<sp/>box.<ref refid="class_box_1a68f253f0fe77b3e27e5de0f37b17814b" kindref="member">GetExtent</ref>().<ref refid="class_f_vector3_1a10ba3ed47b315d00151e218878a3f1b9" kindref="member">Y</ref><sp/>&amp;&amp;<sp/>interssection[i].<ref refid="class_f_vector3_1a10ba3ed47b315d00151e218878a3f1b9" kindref="member">Y</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interssection[i].<ref refid="class_f_vector3_1a4a84942e8ea39dd717b9ade9ba0cfe36" kindref="member">Z</ref><sp/>&lt;=<sp/>box.<ref refid="class_box_1a68f253f0fe77b3e27e5de0f37b17814b" kindref="member">GetExtent</ref>().<ref refid="class_f_vector3_1a4a84942e8ea39dd717b9ade9ba0cfe36" kindref="member">Z</ref><sp/>&amp;&amp;<sp/>interssection[i].<ref refid="class_f_vector3_1a4a84942e8ea39dd717b9ade9ba0cfe36" kindref="member">Z</ref><sp/>&gt;=<sp/>0</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>2)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stopAtFirstCollision)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>closestPoint<sp/>=<sp/>interssection[0];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>i;<sp/>j++)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((line.<ref refid="class_ray_1a2859e9188636187d64dc28fd70b9bce5" kindref="member">GetOrigin</ref>()<sp/>-<sp/>interssection[j]).Length()<sp/>&lt;<sp/>(line.<ref refid="class_ray_1a2859e9188636187d64dc28fd70b9bce5" kindref="member">GetOrigin</ref>()<sp/>-<sp/>closestPoint).Length())</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closestPoint<sp/>=<sp/>interssection[j];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionPoints[0]<sp/>=<sp/>closestPoint;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>i;<sp/>j++)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collisionPoints[j]<sp/>=<sp/>interssection[j];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.<ref refid="struct_s___collision_data_1a0c194485e8a69d3095b1c57ede822caa" kindref="member">CollisionPoint</ref><sp/>=<sp/>collisionPoints[0];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="class_c___collision_component_1a7c1ba14fd9b8b451ae43b30f4dafe24b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a7c1ba14fd9b8b451ae43b30f4dafe24b" kindref="member">C_CollisionComponent::SpherePlaneCollision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sphere" kindref="compound">Sphere</ref>&amp;<sp/>sphere,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>&amp;<sp/>direction,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_plane" kindref="compound">Plane</ref>&amp;<sp/>plane,<sp/><ref refid="struct_s___collision_data" kindref="compound">S_CollisionData</ref>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>collisionDirection<sp/>=<sp/>((plane.<ref refid="class_plane_1a5af8f5feea1fbdb390d43010686f4545" kindref="member">GetPlaneNormal</ref>()<sp/>*<sp/>-1)<sp/>+<sp/>sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref>).<ref refid="class_f_vector3_1a858673b76007df4d6c4c416d9dba31a7" kindref="member">GetNormal</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>collisionPoint;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>plane.<ref refid="class_plane_1add5e27d1600e501a2c5603855156f763" kindref="member">InterssectionPoint</ref>(<ref refid="class_ray" kindref="compound">Ray</ref>(sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref>,<sp/>collisionDirection,<sp/>sphere.<ref refid="class_sphere_1ae6f42f0da6679a2f0b4a22681ccccf38" kindref="member">radius</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>collisionPoint);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>data.<ref refid="struct_s___collision_data_1a0c194485e8a69d3095b1c57ede822caa" kindref="member">CollisionPoint</ref><sp/>=<sp/>collisionPoint;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="class_c___collision_component_1a214abff60004c1da0e53ce2ff60db634" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a214abff60004c1da0e53ce2ff60db634" kindref="member">C_CollisionComponent::SphereBoxCollision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sphere" kindref="compound">Sphere</ref>&amp;<sp/>sphere,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_box" kindref="compound">Box</ref>&amp;<sp/>box,<sp/><ref refid="struct_s___collision_data" kindref="compound">S_CollisionData</ref>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref>.<ref refid="class_f_vector3_1aa6655e85376fd79f5e0b0fd89ba0258e" kindref="member">X</ref><sp/>-<sp/>sphere.<ref refid="class_sphere_1ae6f42f0da6679a2f0b4a22681ccccf38" kindref="member">radius</ref><sp/>&lt;=<sp/>box.<ref refid="class_box_1ab60efc45d66c7447b26801701f16caaf" kindref="member">GetPosition</ref>().<ref refid="class_f_vector3_1aa6655e85376fd79f5e0b0fd89ba0258e" kindref="member">X</ref><sp/>+<sp/>box.<ref refid="class_box_1a68f253f0fe77b3e27e5de0f37b17814b" kindref="member">GetExtent</ref>().<ref refid="class_f_vector3_1aa6655e85376fd79f5e0b0fd89ba0258e" kindref="member">X</ref><sp/>&amp;&amp;<sp/>sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref>.<ref refid="class_f_vector3_1aa6655e85376fd79f5e0b0fd89ba0258e" kindref="member">X</ref><sp/>+<sp/>sphere.<ref refid="class_sphere_1ae6f42f0da6679a2f0b4a22681ccccf38" kindref="member">radius</ref><sp/>&gt;=<sp/>box.<ref refid="class_box_1ab60efc45d66c7447b26801701f16caaf" kindref="member">GetPosition</ref>().<ref refid="class_f_vector3_1aa6655e85376fd79f5e0b0fd89ba0258e" kindref="member">X</ref>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref>.<ref refid="class_f_vector3_1a10ba3ed47b315d00151e218878a3f1b9" kindref="member">Y</ref><sp/>-<sp/>sphere.<ref refid="class_sphere_1ae6f42f0da6679a2f0b4a22681ccccf38" kindref="member">radius</ref><sp/>&lt;=<sp/>box.<ref refid="class_box_1ab60efc45d66c7447b26801701f16caaf" kindref="member">GetPosition</ref>().<ref refid="class_f_vector3_1a10ba3ed47b315d00151e218878a3f1b9" kindref="member">Y</ref><sp/>+<sp/>box.<ref refid="class_box_1a68f253f0fe77b3e27e5de0f37b17814b" kindref="member">GetExtent</ref>().<ref refid="class_f_vector3_1a10ba3ed47b315d00151e218878a3f1b9" kindref="member">Y</ref><sp/>&amp;&amp;<sp/>sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref>.<ref refid="class_f_vector3_1a10ba3ed47b315d00151e218878a3f1b9" kindref="member">Y</ref><sp/>+<sp/>sphere.<ref refid="class_sphere_1ae6f42f0da6679a2f0b4a22681ccccf38" kindref="member">radius</ref><sp/>&gt;=<sp/>box.<ref refid="class_box_1ab60efc45d66c7447b26801701f16caaf" kindref="member">GetPosition</ref>().<ref refid="class_f_vector3_1a10ba3ed47b315d00151e218878a3f1b9" kindref="member">Y</ref>)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref>.<ref refid="class_f_vector3_1a4a84942e8ea39dd717b9ade9ba0cfe36" kindref="member">Z</ref><sp/>-<sp/>sphere.<ref refid="class_sphere_1ae6f42f0da6679a2f0b4a22681ccccf38" kindref="member">radius</ref><sp/>&lt;=<sp/>box.<ref refid="class_box_1ab60efc45d66c7447b26801701f16caaf" kindref="member">GetPosition</ref>().<ref refid="class_f_vector3_1a4a84942e8ea39dd717b9ade9ba0cfe36" kindref="member">Z</ref><sp/>+<sp/>box.<ref refid="class_box_1a68f253f0fe77b3e27e5de0f37b17814b" kindref="member">GetExtent</ref>().<ref refid="class_f_vector3_1a4a84942e8ea39dd717b9ade9ba0cfe36" kindref="member">Z</ref><sp/>&amp;&amp;<sp/>sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref>.<ref refid="class_f_vector3_1a4a84942e8ea39dd717b9ade9ba0cfe36" kindref="member">Z</ref><sp/>+<sp/>sphere.<ref refid="class_sphere_1ae6f42f0da6679a2f0b4a22681ccccf38" kindref="member">radius</ref><sp/>&gt;=<sp/>box.<ref refid="class_box_1ab60efc45d66c7447b26801701f16caaf" kindref="member">GetPosition</ref>().<ref refid="class_f_vector3_1a4a84942e8ea39dd717b9ade9ba0cfe36" kindref="member">Z</ref>)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>plane<sp/>:<sp/>box.<ref refid="class_box_1ac02608b590cef9d8f83d96a55fc8971f" kindref="member">box</ref>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>(sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref><sp/>-<sp/>plane.GetRandomPointInPlane())<sp/>*<sp/>plane.GetPlaneNormal();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance<sp/>&lt;<sp/>sphere.<ref refid="class_sphere_1ae6f42f0da6679a2f0b4a22681ccccf38" kindref="member">radius</ref>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.<ref refid="struct_s___collision_data_1a0c194485e8a69d3095b1c57ede822caa" kindref="member">CollisionPoint</ref><sp/>=<sp/>(plane.GetPlaneNormal()<sp/>*<sp/>sphere.<ref refid="class_sphere_1ae6f42f0da6679a2f0b4a22681ccccf38" kindref="member">radius</ref>)<sp/>+<sp/>sphere.<ref refid="class_sphere_1a4eb6f93f37ac009d4a1a08c2f20b2257" kindref="member">position</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="class_c___collision_component_1ab92a83c9102a87e4185f768086b45d72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1ab92a83c9102a87e4185f768086b45d72" kindref="member">C_CollisionComponent::ChooseCollisionType</ref>(<ref refid="class_c___collision_component" kindref="compound">C_CollisionComponent</ref>*<sp/>otherCollider,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s___collision_data" kindref="compound">S_CollisionData</ref>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_c___collision_component_1ac530b17a7829153c647f641b0187a6c6" kindref="member">CollisionType</ref><sp/>==<sp/><ref refid="_collision_component_8h_1a8af6ffb5b5b0c4129c3d80f3972015a7acf5d7dd131a91e32ed8f8a26f8156046" kindref="member">NO_COLLISION</ref><sp/>||<sp/>otherCollider-&gt;<ref refid="class_c___collision_component_1ac530b17a7829153c647f641b0187a6c6" kindref="member">CollisionType</ref><sp/>==<sp/><ref refid="_collision_component_8h_1a8af6ffb5b5b0c4129c3d80f3972015a7acf5d7dd131a91e32ed8f8a26f8156046" kindref="member">NO_COLLISION</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_c___collision_component_1ac530b17a7829153c647f641b0187a6c6" kindref="member">CollisionType</ref><sp/>==<sp/>otherCollider-&gt;<ref refid="class_c___collision_component_1ac530b17a7829153c647f641b0187a6c6" kindref="member">CollisionType</ref>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_c___collision_component_1ac530b17a7829153c647f641b0187a6c6" kindref="member">CollisionType</ref>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_collision_component_8h_1a8af6ffb5b5b0c4129c3d80f3972015a7acb2f0de53b7bc584fc5838a34911189c" kindref="member">OVERLAP</ref>:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c___collision_component_1a4607fe01f4dc9fb983ae32b1ea9c59d3" kindref="member">OnOverlapBegin</ref>(data);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_collision_component_8h_1a8af6ffb5b5b0c4129c3d80f3972015a7ad5384d1822c72da119100438c5051831" kindref="member">COLLISION</ref>:</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c___collision_component_1ae1b9be4a52f1f78e91d8be98f21f6afa" kindref="member">OnCollision</ref>(data);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a4607fe01f4dc9fb983ae32b1ea9c59d3" kindref="member">OnOverlapBegin</ref>(data);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>C_CollisionComponent::SetComponentPosition(const<sp/>FVector3&amp;<sp/>position)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Do<sp/>the<sp/>static<sp/>check<sp/>here<sp/>as<sp/>well?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Transform-&gt;SetPosition(position);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:Do<sp/>check<sp/>to<sp/>see<sp/>if<sp/>in<sp/>same<sp/>collider<sp/>here.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="class_c___collision_component_1a3fa4d25271244b35c26767876265347f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a3fa4d25271244b35c26767876265347f" kindref="member">C_CollisionComponent::SetCurrentNode</ref>(<ref refid="class_oct_node" kindref="compound">OctNode</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>CurrentNode<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="class_c___collision_component_1afe301286716016f42f8a2c7c5c836fff" refkind="member"><highlight class="normal"><ref refid="class_oct_node" kindref="compound">OctNode</ref>*<sp/><ref refid="class_c___collision_component_1afe301286716016f42f8a2c7c5c836fff" kindref="member">C_CollisionComponent::GetCurrentNode</ref>()</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CurrentNode;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="class_c___collision_component_1ae1b9be4a52f1f78e91d8be98f21f6afa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1ae1b9be4a52f1f78e91d8be98f21f6afa" kindref="member">C_CollisionComponent::OnCollision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s___collision_data" kindref="compound">S_CollisionData</ref>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_c___collision_component_1a5f3f4dec04a178378c5a6842c9d51c25" kindref="member">CollisionFunction</ref>)<sp/><ref refid="class_c___collision_component_1a5f3f4dec04a178378c5a6842c9d51c25" kindref="member">CollisionFunction</ref>(<ref refid="class_o___component_1ad6c797345730809059d368357b92ebf5" kindref="member">Owner</ref>,<sp/>data);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="class_c___collision_component_1a4607fe01f4dc9fb983ae32b1ea9c59d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a4607fe01f4dc9fb983ae32b1ea9c59d3" kindref="member">C_CollisionComponent::OnOverlapBegin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_s___collision_data" kindref="compound">S_CollisionData</ref>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_c___collision_component_1a2eb843b8e065c00876459c87526ac53b" kindref="member">OverlapBeginFunction</ref>)<sp/><ref refid="class_c___collision_component_1a2eb843b8e065c00876459c87526ac53b" kindref="member">OverlapBeginFunction</ref>(<ref refid="class_o___component_1ad6c797345730809059d368357b92ebf5" kindref="member">Owner</ref>,<sp/>data);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="class_c___collision_component_1ade429f9c73c3d78defd4521ef5ddacd4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1ade429f9c73c3d78defd4521ef5ddacd4" kindref="member">C_CollisionComponent::OnOverlapEnd</ref>(<ref refid="class_c___collision_component" kindref="compound">C_CollisionComponent</ref>*<sp/>otherCollider)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1a37c98ee178467d0bcc8fe7378469fdf2" kindref="member">OverlapEndFunction</ref>)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c___collision_component_1a37c98ee178467d0bcc8fe7378469fdf2" kindref="member">OverlapEndFunction</ref>(<ref refid="class_o___component_1ad6c797345730809059d368357b92ebf5" kindref="member">Owner</ref>,<sp/>otherCollider);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="class_c___collision_component_1ad72cdb3fe415cf6501891f8e7e3e2012" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1ad72cdb3fe415cf6501891f8e7e3e2012" kindref="member">C_CollisionComponent::Update</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o___object_1a640a13e8dc5229329cef12ae8056e919" kindref="member">C_TransformComponent::Update</ref>(deltaTime);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="class_c___collision_component_1a2c0c9437717671f0cf61509ba57266db" refkind="member"><highlight class="normal"><ref refid="class_c___collision_component_1a2c0c9437717671f0cf61509ba57266db" kindref="member">C_CollisionComponent::C_CollisionComponent</ref>(<ref refid="class_o___game_object" kindref="compound">O_GameObject</ref>*<sp/>owner,<sp/><ref refid="_collision_component_8h_1a8af6ffb5b5b0c4129c3d80f3972015a7" kindref="member">ECollisionType</ref><sp/>collisionType)<sp/>:<sp/><ref refid="class_c___transform_component" kindref="compound">C_TransformComponent</ref>(owner)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c___collision_component_1ac530b17a7829153c647f641b0187a6c6" kindref="member">CollisionType</ref><sp/>=<sp/>collisionType;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>Collider<sp/>must<sp/>be<sp/>added<sp/>to<sp/>partition<sp/>throught<sp/>the<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Owner-&gt;GetLevel()-&gt;AddCollider(this);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="class_c___collision_component_1a2d9c33250a4968f6f771c82981412eb9" refkind="member"><highlight class="normal"><ref refid="class_c___collision_component_1a2d9c33250a4968f6f771c82981412eb9" kindref="member">C_CollisionComponent::~C_CollisionComponent</ref>()</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>CurrentNode<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="class_c___collision_component_1ad09340f2a3f2df22791f2617b243d375" refkind="member"><highlight class="normal"><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/><ref refid="class_c___collision_component_1ad09340f2a3f2df22791f2617b243d375" kindref="member">C_CollisionComponent::GetFurthestPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>&amp;<sp/>direction)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="189"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>();</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="class_c___collision_component_1a7779ded8a8ce109ee8280c3de5e7e423" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a7779ded8a8ce109ee8280c3de5e7e423" kindref="member">C_CollisionComponent::GJK</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component" kindref="compound">C_CollisionComponent</ref>*<sp/>colliderA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component" kindref="compound">C_CollisionComponent</ref>*<sp/>colliderB)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>initial<sp/>support<sp/>point<sp/>in<sp/>any<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>support<sp/>=<sp/><ref refid="class_c___collision_component_1ab97c4fe3de97119d12d1123dfa1c29fe" kindref="member">GetFurthestMinkDiffPoint</ref>(colliderA,<sp/>colliderB,<sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>(0.0f,<sp/>0.0f,<sp/>1.0f));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simplex<sp/>is<sp/>an<sp/>array<sp/>of<sp/>points,<sp/>max<sp/>count<sp/>is<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_simplex" kindref="compound">Simplex</ref><sp/>points;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>points.<ref refid="struct_simplex_1abe760a4ce661261784808e388bb58c18" kindref="member">PushFront</ref>(support);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>direction<sp/>is<sp/>towards<sp/>the<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>direction<sp/>=<sp/>-support;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>support<sp/>=<sp/><ref refid="class_c___collision_component_1ab97c4fe3de97119d12d1123dfa1c29fe" kindref="member">GetFurthestMinkDiffPoint</ref>(colliderA,<sp/>colliderB,<sp/>direction);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(support<sp/>*<sp/>direction<sp/>&lt;=<sp/>0)<sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c___collision_component_1ae636df1241a094fa65930311563b2514" kindref="member">Line</ref>(points,<sp/>direction);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points.<ref refid="struct_simplex_1abe760a4ce661261784808e388bb58c18" kindref="member">PushFront</ref>(support);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c___collision_component_1aa44bbe17764337d41b2e5cdc048e35ae" kindref="member">Triangle</ref>(points,<sp/>direction);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points.<ref refid="struct_simplex_1abe760a4ce661261784808e388bb58c18" kindref="member">PushFront</ref>(support);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1a5dc92e84613a4e3ab2670b84ee659f8c" kindref="member">Tetrahedron</ref>(points,<sp/>direction))</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points.<ref refid="struct_simplex_1abe760a4ce661261784808e388bb58c18" kindref="member">PushFront</ref>(support);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="class_c___collision_component_1ab97c4fe3de97119d12d1123dfa1c29fe" refkind="member"><highlight class="normal"><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/><ref refid="class_c___collision_component_1ab97c4fe3de97119d12d1123dfa1c29fe" kindref="member">C_CollisionComponent::GetFurthestMinkDiffPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component" kindref="compound">C_CollisionComponent</ref>*<sp/>colliderA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component" kindref="compound">C_CollisionComponent</ref>*<sp/>colliderB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>&amp;<sp/>direction)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>colliderA-&gt;<ref refid="class_c___collision_component_1ad09340f2a3f2df22791f2617b243d375" kindref="member">GetFurthestPoint</ref>(direction)<sp/>-<sp/>colliderB-&gt;<ref refid="class_c___collision_component_1ad09340f2a3f2df22791f2617b243d375" kindref="member">GetFurthestPoint</ref>(direction<sp/>*<sp/>-1.0f);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="class_c___collision_component_1a2cd37af746842efd82c53a14e383304e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a2cd37af746842efd82c53a14e383304e" kindref="member">C_CollisionComponent::NextSimplex</ref>(<ref refid="struct_simplex" kindref="compound">Simplex</ref>&amp;<sp/>points,<sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>&amp;<sp/>direction)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(points.<ref refid="struct_simplex_1aeede2b943bcd3d7ab16da0a2715113da" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1ae636df1241a094fa65930311563b2514" kindref="member">Line</ref>(points,<sp/>direction);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1aa44bbe17764337d41b2e5cdc048e35ae" kindref="member">Triangle</ref>(points,<sp/>direction);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a5dc92e84613a4e3ab2670b84ee659f8c" kindref="member">Tetrahedron</ref>(points,<sp/>direction);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight><highlight class="comment">//this<sp/>should<sp/>never<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" kindref="member">C_CollisionComponent::SameDirection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>&amp;<sp/>direction,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>&amp;<sp/>pointToOrigin)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>direction<sp/>*<sp/>pointToOrigin;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="class_c___collision_component_1ae636df1241a094fa65930311563b2514" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1ae636df1241a094fa65930311563b2514" kindref="member">C_CollisionComponent::Line</ref>(<ref refid="struct_simplex" kindref="compound">Simplex</ref>&amp;<sp/>points,<sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>&amp;<sp/>direction)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>a<sp/>=<sp/>points[0];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>b<sp/>=<sp/>points[1];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>ab<sp/>=<sp/>b<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>ao<sp/>=<sp/>-a;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" kindref="member">SameDirection</ref>(ab,<sp/>ao))<sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/>=<sp/>ab.<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(ao).<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(ab);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points<sp/>=<sp/>{<sp/>a<sp/>};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/>=<sp/>ao;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="class_c___collision_component_1aa44bbe17764337d41b2e5cdc048e35ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1aa44bbe17764337d41b2e5cdc048e35ae" kindref="member">C_CollisionComponent::Triangle</ref>(<ref refid="struct_simplex" kindref="compound">Simplex</ref>&amp;<sp/>points,<sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>&amp;<sp/>direction)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>a<sp/>=<sp/>points[0];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>b<sp/>=<sp/>points[1];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>c<sp/>=<sp/>points[2];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>ab<sp/>=<sp/>b<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>ac<sp/>=<sp/>c<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>ao<sp/>=<sp/>-a;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>abc<sp/>=<sp/>ab.<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(ac);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" kindref="member">SameDirection</ref>(abc.<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(ac),<sp/>ao))<sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" kindref="member">SameDirection</ref>(ac,<sp/>ao))<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points<sp/>=<sp/>{<sp/>a,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/>=<sp/>ac.<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(ao).<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(ac);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1ae636df1241a094fa65930311563b2514" kindref="member">Line</ref>(points<sp/>=<sp/>{<sp/>a,<sp/>b<sp/>},<sp/>direction);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" kindref="member">SameDirection</ref>(ab.<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(abc),<sp/>ao))<sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1ae636df1241a094fa65930311563b2514" kindref="member">Line</ref>(points<sp/>=<sp/>{<sp/>a,<sp/>b<sp/>},<sp/>direction);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" kindref="member">SameDirection</ref>(abc,<sp/>ao))<sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/>=<sp/>abc;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points<sp/>=<sp/>{<sp/>a,<sp/>c,<sp/>b<sp/>};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/>=<sp/>-abc;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="class_c___collision_component_1a5dc92e84613a4e3ab2670b84ee659f8c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1a5dc92e84613a4e3ab2670b84ee659f8c" kindref="member">C_CollisionComponent::Tetrahedron</ref>(<ref refid="struct_simplex" kindref="compound">Simplex</ref>&amp;<sp/>points,<sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref>&amp;<sp/>direction)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>a<sp/>=<sp/>points[0];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>b<sp/>=<sp/>points[1];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>c<sp/>=<sp/>points[2];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>d<sp/>=<sp/>points[3];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>ab<sp/>=<sp/>b<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>ac<sp/>=<sp/>c<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>ad<sp/>=<sp/>d<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>ao<sp/>=<sp/>-a;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>abc<sp/>=<sp/>ab.<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(ac);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>acd<sp/>=<sp/>ac.<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(ad);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector3" kindref="compound">FVector3</ref><sp/>adb<sp/>=<sp/>ad.<ref refid="class_f_vector3_1a639d413c4693b112a15c43cb27aebf71" kindref="member">CrossProduct</ref>(ab);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" kindref="member">SameDirection</ref>(abc,<sp/>ao))<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1aa44bbe17764337d41b2e5cdc048e35ae" kindref="member">Triangle</ref>(points<sp/>=<sp/>{<sp/>a,<sp/>b,<sp/>c<sp/>},<sp/>direction);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" kindref="member">SameDirection</ref>(acd,<sp/>ao))<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1aa44bbe17764337d41b2e5cdc048e35ae" kindref="member">Triangle</ref>(points<sp/>=<sp/>{<sp/>a,<sp/>c,<sp/>d<sp/>},<sp/>direction);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c___collision_component_1aad982218222f251241c99ffa2d9f6955" kindref="member">SameDirection</ref>(adb,<sp/>ao))<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c___collision_component_1aa44bbe17764337d41b2e5cdc048e35ae" kindref="member">Triangle</ref>(points<sp/>=<sp/>{<sp/>a,<sp/>d,<sp/>b<sp/>},<sp/>direction);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//bool<sp/>C_CollisionComponent::CheckSimplexForOrigin(Simplex&amp;<sp/>simplex)<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>/*float<sp/>v0,<sp/>v1,<sp/>v2,<sp/>v3,<sp/>v4;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>FVector4<sp/>nim<sp/>=<sp/>FVector4(0,<sp/>0,<sp/>0,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>v0<sp/>=<sp/>FMatrix4(simplex.GetPointAtIndex(0),<sp/>simplex.GetPointAtIndex(1),<sp/>simplex.GetPointAtIndex(2),<sp/>simplex.GetPointAtIndex(3)).Det();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>v1<sp/>=<sp/>FMatrix4(nim,<sp/>simplex.GetPointAtIndex(1),<sp/>simplex.GetPointAtIndex(2),<sp/>simplex.GetPointAtIndex(3)).Det();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>v2<sp/>=<sp/>FMatrix4(simplex.GetPointAtIndex(0),<sp/>nim,<sp/>simplex.GetPointAtIndex(2),<sp/>simplex.GetPointAtIndex(3)).Det();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>v3<sp/>=<sp/>FMatrix4(simplex.GetPointAtIndex(0),<sp/>simplex.GetPointAtIndex(1),<sp/>nim,<sp/>simplex.GetPointAtIndex(3)).Det();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>v4<sp/>=<sp/>FMatrix4(simplex.GetPointAtIndex(0),<sp/>simplex.GetPointAtIndex(1),<sp/>simplex.GetPointAtIndex(2),<sp/>nim).Det();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>float<sp/>v[]<sp/>=<sp/>{<sp/>v1,<sp/>v2,<sp/>v3,<sp/>v3<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(v0<sp/>&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>else<sp/>if(v1<sp/>/<sp/>v0<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>v2<sp/>/<sp/>v0<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>v3<sp/>/<sp/>v0<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>v4<sp/>/<sp/>v0<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>FMatrix4<sp/>matrices[5];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>matrices[0]<sp/>=<sp/>FMatrix4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>FVector4(simplex.GetVertexAtIndex(0).X,<sp/>simplex.GetVertexAtIndex(0).Y,<sp/>simplex.GetVertexAtIndex(0).Z,<sp/>1.0f),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>FVector4(simplex.GetVertexAtIndex(1).X,<sp/>simplex.GetVertexAtIndex(1).Y,<sp/>simplex.GetVertexAtIndex(1).Z,<sp/>1.0f),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>FVector4(simplex.GetVertexAtIndex(2).X,<sp/>simplex.GetVertexAtIndex(2).Y,<sp/>simplex.GetVertexAtIndex(2).Z,<sp/>1.0f),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>FVector4(simplex.GetVertexAtIndex(3).X,<sp/>simplex.GetVertexAtIndex(3).Y,<sp/>simplex.GetVertexAtIndex(3).Z,<sp/>1.0f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>int<sp/>determinatCheckIndex;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>float<sp/>matrixDet<sp/>=<sp/>matrices[0].Det();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>float<sp/>tempDet;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(determinatCheckIndex<sp/>=<sp/>1;<sp/>determinatCheckIndex<sp/>&lt;<sp/>4;<sp/>determinatCheckIndex++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>matrices[determinatCheckIndex]<sp/>=<sp/>matrices[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>matrices[determinatCheckIndex].SetRow(FVector4(0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f),<sp/>determinatCheckIndex<sp/>-<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>tempDet<sp/>=<sp/>matrices[determinatCheckIndex].Det();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//printf(&quot;M:<sp/>%f\tT:<sp/>%f\n&quot;,<sp/>matrixDet,<sp/>tempDet);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(matrixDet<sp/>/<sp/>tempDet<sp/>&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simplex.SetVertexAtIndex(determinatCheckIndex,<sp/>simplex.GetVertexAtIndex(4));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Objects/Components/Colliders/CollisionComponent.cpp"/>
  </compounddef>
</doxygen>
