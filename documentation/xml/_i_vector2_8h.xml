<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_i_vector2_8h" kind="file" language="C++">
    <compoundname>IVector2.h</compoundname>
    <includedby refid="_mouse_event_handler_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Event/MouseEventHandler.cpp</includedby>
    <includedby refid="_f_vector2_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/FVector2.cpp</includedby>
    <includedby refid="_i_vector2_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/IVector2.cpp</includedby>
    <includedby refid="_pawn_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Game/Pawn.cpp</includedby>
    <invincdepgraph>
      <node id="2">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Event/MouseEventHandler.cpp</label>
        <link refid="_mouse_event_handler_8cpp"/>
      </node>
      <node id="3">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/FVector2.cpp</label>
        <link refid="_f_vector2_8cpp"/>
      </node>
      <node id="4">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/IVector2.cpp</label>
        <link refid="_i_vector2_8cpp"/>
      </node>
      <node id="1">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/IVector2.h</label>
        <link refid="_i_vector2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Game/Pawn.cpp</label>
        <link refid="_pawn_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_i_vector2" prot="public">IVector2</innerclass>
    <innerclass refid="struct_h_a_s_h___i_vector2" prot="public">HASH_IVector2</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>IVECTOR2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IVECTOR2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="class_i_vector2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_i_vector2" kindref="compound">IVector2</ref></highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Array<sp/>containing<sp/>Vector<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="class_i_vector2_1ad7a8142d65cc58bf4da9dd10ad8d9845" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1ad7a8142d65cc58bf4da9dd10ad8d9845" kindref="member">X</ref>,<sp/><ref refid="class_i_vector2_1a55c7ce04311435f90055b7d0bcb8e52a" kindref="member">Y</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>using<sp/>initial<sp/>values<sp/>for<sp/>each<sp/>component.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2_1a5398df9d1d74a715e29bdf87d43202e0" kindref="member">IVector2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>initializing<sp/>all<sp/>components<sp/>to<sp/>a<sp/>single<sp/>int<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2_1a5398df9d1d74a715e29bdf87d43202e0" kindref="member">IVector2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>initializing<sp/>to<sp/>match<sp/>a<sp/>given<sp/>IVector2,<sp/>a<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2_1a5398df9d1d74a715e29bdf87d43202e0" kindref="member">IVector2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Contructor<sp/>initalizaing<sp/>to<sp/>match<sp/>given<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2_1a5398df9d1d74a715e29bdf87d43202e0" kindref="member">IVector2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values[2]);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Default<sp/>Constructor,<sp/>initializes<sp/>all<sp/>values<sp/>to<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2_1a5398df9d1d74a715e29bdf87d43202e0" kindref="member">IVector2</ref>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2_1aebc08957b6797774bc05434476b66a0f" kindref="member">~IVector2</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1ad96a6ad9d97f96eda50da99543652ad0" kindref="member">operator+ </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;+&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>plus<sp/>vector<sp/>addition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="class_i_vector2_1a65d9b55d4eb73fa9bd86e97dcd15ba6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1ad96a6ad9d97f96eda50da99543652ad0" kindref="member">operator+ </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1a445f9b639ecd83129b760d69245d01c4" kindref="member">operator- </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;-&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>minus<sp/>vector<sp/>subtraction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_i_vector2_1a62d171ebdc4de9936865db9f8077b2e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1a445f9b639ecd83129b760d69245d01c4" kindref="member">operator- </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1a6ff3a9691d266844072b8cbefc7a3204" kindref="member">operator* </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>multiplier)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;*&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>times<sp/>scalar<sp/>multiplication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1a3781ed5b6591855650136310a86e144d" kindref="member">operator/ </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divisor)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;/&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>divided<sp/>by<sp/>scalar<sp/>division.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a6ff3a9691d266844072b8cbefc7a3204" kindref="member">operator* </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;*&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>times<sp/>vector<sp/>dot<sp/>product.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="class_i_vector2_1a8ce24aa427d0848205e377832160aee6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a6ff3a9691d266844072b8cbefc7a3204" kindref="member">operator* </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>*<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a70bf00e7206d580aeee6351a144c2a5a" kindref="member">operator= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector);</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;=&quot;<sp/>operator,<sp/>makes<sp/>each<sp/>component<sp/>of<sp/>the<sp/>vector<sp/>equal<sp/>to<sp/>the<sp/>equivalent<sp/>component<sp/>of<sp/>a<sp/>given<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_i_vector2_1a57fe5306b3440b52bfed1fc5d5482cf3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a70bf00e7206d580aeee6351a144c2a5a" kindref="member">operator= </ref>(<ref refid="class_i_vector2" kindref="compound">IVector2</ref>*<sp/>vector)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a70bf00e7206d580aeee6351a144c2a5a" kindref="member">operator= </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values[3]);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a6604e6db9debd817db24dc8a0bad6b36" kindref="member">operator+= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector);</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;+=&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>plus<sp/>vector<sp/>addition<sp/>changing<sp/>the<sp/>current<sp/>vector<sp/>to<sp/>equal<sp/>to<sp/>sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_i_vector2_1ac4efea06fdbfbf0ece3214d32d50f57e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a6604e6db9debd817db24dc8a0bad6b36" kindref="member">operator+= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>*&amp;<sp/>vector)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+=<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a5fdcea55aa059a7d3a1806b7899b4c22" kindref="member">operator-= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector);</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;-=&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>minus<sp/>vector<sp/>subtraction.<sp/>changing<sp/>the<sp/>current<sp/>vector<sp/>to<sp/>equal<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_i_vector2_1ae790d4ac6732389910a1fe2ac11caa54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a5fdcea55aa059a7d3a1806b7899b4c22" kindref="member">operator-= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>*&amp;<sp/>vector)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-=<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a309650f1fceb03ede04f3f8a617cf081" kindref="member">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;==&quot;<sp/>operator,<sp/>returns<sp/>the<sp/>boolean<sp/>value<sp/>of<sp/>equal<sp/>to<sp/>between<sp/>two<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_i_vector2_1ad21860c9116c573d963da416e3900ca8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a309650f1fceb03ede04f3f8a617cf081" kindref="member">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="class_i_vector2_1ab571b709ec5252acc4cb6a8eea2a9ea8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1ab571b709ec5252acc4cb6a8eea2a9ea8" kindref="member">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>vector);<sp/>}</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;!=&quot;<sp/>operator,<sp/>returns<sp/>the<sp/>boolean<sp/>value<sp/>of<sp/>not<sp/>equal<sp/>to<sp/>between<sp/>two<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_i_vector2_1afbe6c12c76a22ef836c56a1d1b3f33a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1ab571b709ec5252acc4cb6a8eea2a9ea8" kindref="member">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>*vector);<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="class_i_vector2_1abde2a33064328d168c447cffa9f78557" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1abde2a33064328d168c447cffa9f78557" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(&amp;<ref refid="class_i_vector2_1ad7a8142d65cc58bf4da9dd10ad8d9845" kindref="member">X</ref><sp/>+<sp/>index);<sp/>}</highlight><highlight class="comment">//For<sp/>R-values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_i_vector2_1a103db121de0043e654b28cb1ff51bdbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><ref refid="class_i_vector2_1abde2a33064328d168c447cffa9f78557" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">*(&amp;<ref refid="class_i_vector2_1ad7a8142d65cc58bf4da9dd10ad8d9845" kindref="member">X</ref><sp/>+<sp/>index);<sp/>}</highlight><highlight class="comment">//For<sp/>L-Values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_i_vector2_1aa903e541b706a9552bd8c1fe7a3874cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="class_i_vector2_1ad7a8142d65cc58bf4da9dd10ad8d9845" kindref="member">X</ref>);<sp/>}</highlight><highlight class="comment">//For<sp/>R-Values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="class_i_vector2_1a5b71e5aecd81352ce4f9f50b16f48a41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="class_i_vector2_1ad7a8142d65cc58bf4da9dd10ad8d9845" kindref="member">X</ref>);<sp/>}</highlight><highlight class="comment">//For<sp/>L-Values</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//Returns<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>Vector<sp/>(or<sp/>Vector&apos;s<sp/>scalar<sp/>lenght)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a768d547e0c64e5271fb66d5e8958f3ed" kindref="member">Length</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>angle<sp/>between<sp/>this<sp/>vector<sp/>and<sp/>another<sp/>given<sp/>vector<sp/>in<sp/>degrees.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a68bbf7660e7394cdeac84836f02db2a5" kindref="member">GetAngle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inRadians<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79" refid="class_i_vector2_1a52df235083d59f1bc2208a379fd608ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a52df235083d59f1bc2208a379fd608ad" kindref="member">GetAngle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>*&amp;<sp/>vector,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inRadians<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a52df235083d59f1bc2208a379fd608ad" kindref="member">GetAngle</ref>(*vector,<sp/>inRadians);<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>cross<sp/>product<sp/>between<sp/>this<sp/>vector<sp/>and<sp/>another<sp/>given<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1a81c4f39a3150cf395a97c1fac6948def" kindref="member">CrossProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector);</highlight></codeline>
<codeline lineno="83" refid="class_i_vector2_1a1a6c7d7b3678af1578c3a0727ef2b0fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1a1a6c7d7b3678af1578c3a0727ef2b0fb" kindref="member">CrossProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>*&amp;<sp/>vector)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a1a6c7d7b3678af1578c3a0727ef2b0fb" kindref="member">CrossProduct</ref>(*vector);<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Gets<sp/>the<sp/>normalized<sp/>form<sp/>of<sp/>this<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Does<sp/>not<sp/>alter<sp/>teh<sp/>vector<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1adc94bfc5a8e6f6c2a10ea39adb91693d" kindref="member">GetNormal</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Divides<sp/>the<sp/>vector<sp/>by<sp/>its<sp/>Magnitude<sp/>to<sp/>set<sp/>it<sp/>to<sp/>the<sp/>normalized<sp/>unit<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1aa913abbb3516a3abf76574e890119094" kindref="member">Normalize</ref>();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Rotates<sp/>the<sp/>vector<sp/>by<sp/>a<sp/>given<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>second<sp/>parameter<sp/>to<sp/>true<sp/>to<sp/>pass<sp/>angle<sp/>value<sp/>in<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a35cacc594655edc204daf4b0ce7b44b3" kindref="member">Rotate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>angle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRadian<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>2D<sp/>vector<sp/>that<sp/>points<sp/>at<sp/>a<sp/>given<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>second<sp/>parameter<sp/>to<sp/>true<sp/>to<sp/>pass<sp/>angle<sp/>value<sp/>in<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/><ref refid="class_i_vector2_1a021cb22bfc8b102abb03fb2e2ea90580" kindref="member">GetVectorByAngle</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>angle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRadian<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a8ece09a9f611fbdb7edaafde7b667bcc" kindref="member">GetDistance</ref>(<ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1a8ece09a9f611fbdb7edaafde7b667bcc" kindref="member">GetDistance</ref>(<ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/>vector1,<sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref><sp/>vector2);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2_1ab556bced7256e11eee9e1e9c68169462" kindref="member">Print</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="struct_h_a_s_h___i_vector2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_h_a_s_h___i_vector2" kindref="compound">HASH_IVector2</ref></highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_h_a_s_h___i_vector2_1ac09f2f4defff0ba342d2cb083007c138" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/IVector2.h"/>
  </compounddef>
</doxygen>
