<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_f_vector2_8h" kind="file" language="C++">
    <compoundname>FVector2.h</compoundname>
    <includedby refid="_core_engine_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Core/CoreEngine.cpp</includedby>
    <includedby refid="_mouse_event_handler_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Event/MouseEventHandler.cpp</includedby>
    <includedby refid="_f_vector2_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/FVector2.cpp</includedby>
    <includedby refid="_camera_component_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Objects/Components/CameraComponent.cpp</includedby>
    <includedby refid="_vulkan_manager_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanManager.cpp</includedby>
    <includedby refid="_pawn_8cpp" local="yes">C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Game/Pawn.cpp</includedby>
    <invincdepgraph>
      <node id="2">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Core/CoreEngine.cpp</label>
        <link refid="_core_engine_8cpp"/>
      </node>
      <node id="3">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Event/MouseEventHandler.cpp</label>
        <link refid="_mouse_event_handler_8cpp"/>
      </node>
      <node id="4">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/FVector2.cpp</label>
        <link refid="_f_vector2_8cpp"/>
      </node>
      <node id="1">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/FVector2.h</label>
        <link refid="_f_vector2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Objects/Components/CameraComponent.cpp</label>
        <link refid="_camera_component_8cpp"/>
      </node>
      <node id="6">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Renderers/Vulkan/VulkanManager.cpp</label>
        <link refid="_vulkan_manager_8cpp"/>
      </node>
      <node id="7">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Game/Pawn.cpp</label>
        <link refid="_pawn_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_f_vector2" prot="public">FVector2</innerclass>
    <innerclass refid="struct_h_a_s_h___f_vector2" prot="public">HASH_FVector2</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>FVector2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FVector2_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_i_vector2" kindref="compound">IVector2</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="class_f_vector2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_f_vector2" kindref="compound">FVector2</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Array<sp/>containing<sp/>Vector<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_f_vector2_1a4149790b0bcdb391bc575cd008df9bdb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a4149790b0bcdb391bc575cd008df9bdb" kindref="member">X</ref>,<sp/><ref refid="class_f_vector2_1a1ec9ae56c36cbf0f4cdb0861d623a1b0" kindref="member">Y</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>using<sp/>initial<sp/>values<sp/>for<sp/>each<sp/>component.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2_1aff40eb4d668fc991f9fefc0f8ac75964" kindref="member">FVector2</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>initializing<sp/>all<sp/>components<sp/>to<sp/>a<sp/>single<sp/>float<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2_1aff40eb4d668fc991f9fefc0f8ac75964" kindref="member">FVector2</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>initializing<sp/>to<sp/>match<sp/>a<sp/>given<sp/>FVector2,<sp/>a<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2_1aff40eb4d668fc991f9fefc0f8ac75964" kindref="member">FVector2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>initializing<sp/>to<sp/>match<sp/>a<sp/>given<sp/>IVector2,<sp/>a<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2_1aff40eb4d668fc991f9fefc0f8ac75964" kindref="member">FVector2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_i_vector2" kindref="compound">IVector2</ref>&amp;<sp/>vector);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Contructor<sp/>initalizaing<sp/>to<sp/>match<sp/>given<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2_1aff40eb4d668fc991f9fefc0f8ac75964" kindref="member">FVector2</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>values[2]);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Default<sp/>Constructor,<sp/>initializes<sp/>all<sp/>values<sp/>to<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2_1aff40eb4d668fc991f9fefc0f8ac75964" kindref="member">FVector2</ref>();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2_1ade680477fa58088e3898af0c072e1764" kindref="member">~FVector2</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a667a19cc0c1b3bc072ee5236c0e1747f" kindref="member">operator+ </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;+&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>plus<sp/>vector<sp/>addition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="class_f_vector2_1a165be21123d12cfcba6238482073aa6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a667a19cc0c1b3bc072ee5236c0e1747f" kindref="member">operator+ </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a87cb500a0506afbddaa70113dcb25cc9" kindref="member">operator- </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;-&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>minus<sp/>vector<sp/>subtraction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_f_vector2_1a861f2963100c5da402e7627778ed392d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a87cb500a0506afbddaa70113dcb25cc9" kindref="member">operator- </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a97f6ad81dd7ca1233c49b0820816b376" kindref="member">operator* </ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>multiplier)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;*&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>times<sp/>scalar<sp/>multiplication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a844876ebd9687f0942d92e7209c53809" kindref="member">operator/ </ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>divisor)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;/&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>divided<sp/>by<sp/>scalar<sp/>division.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a97f6ad81dd7ca1233c49b0820816b376" kindref="member">operator* </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;*&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>times<sp/>vector<sp/>dot<sp/>product.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class_f_vector2_1a74c2b0ee940caae977dc4e96134c0bc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a97f6ad81dd7ca1233c49b0820816b376" kindref="member">operator* </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>*<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a378ec1c1870394811e884906f61bf7c0" kindref="member">operator= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector);</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;=&quot;<sp/>operator,<sp/>makes<sp/>each<sp/>component<sp/>of<sp/>the<sp/>vector<sp/>equal<sp/>to<sp/>the<sp/>equivalent<sp/>component<sp/>of<sp/>a<sp/>given<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_f_vector2_1a739ced3575c76a43873afcffd13d2f4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a378ec1c1870394811e884906f61bf7c0" kindref="member">operator= </ref>(<ref refid="class_f_vector2" kindref="compound">FVector2</ref>*<sp/>vector)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a378ec1c1870394811e884906f61bf7c0" kindref="member">operator= </ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>values[3]);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a462fe91c53872b51aec9f00222c2abb6" kindref="member">operator+= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector);</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;+=&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>plus<sp/>vector<sp/>addition<sp/>changing<sp/>the<sp/>current<sp/>vector<sp/>to<sp/>equal<sp/>to<sp/>sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="class_f_vector2_1a099f725b0d27e5e277040ae33af2e401" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a462fe91c53872b51aec9f00222c2abb6" kindref="member">operator+= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>*&amp;<sp/>vector)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+=<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a1bb16b3fb9ccd25e78688f491fc545df" kindref="member">operator-= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector);</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;-=&quot;<sp/>operator,<sp/>makes<sp/>a<sp/>vector<sp/>minus<sp/>vector<sp/>subtraction.<sp/>changing<sp/>the<sp/>current<sp/>vector<sp/>to<sp/>equal<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="class_f_vector2_1a1a16d6057063a497ad5aa0c9e21cb639" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a1bb16b3fb9ccd25e78688f491fc545df" kindref="member">operator-= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>*&amp;<sp/>vector)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-=<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a593f2ef96cbe75f49df99ad7a18b7b78" kindref="member">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;==&quot;<sp/>operator,<sp/>returns<sp/>the<sp/>boolean<sp/>value<sp/>of<sp/>equal<sp/>to<sp/>between<sp/>two<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_f_vector2_1afc70cfe01a33302a2f8a53f4ad94a50f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a593f2ef96cbe75f49df99ad7a18b7b78" kindref="member">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>*vector;<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_f_vector2_1ab65f179346ec11e300e479b4f427081a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1ab65f179346ec11e300e479b4f427081a" kindref="member">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>vector);<sp/>}</highlight><highlight class="comment">//Overload<sp/>of<sp/>the<sp/>&quot;!=&quot;<sp/>operator,<sp/>returns<sp/>the<sp/>boolean<sp/>value<sp/>of<sp/>not<sp/>equal<sp/>to<sp/>between<sp/>two<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_f_vector2_1ac2405c7077881b3eb3ec4ceb7b21b40d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1ab65f179346ec11e300e479b4f427081a" kindref="member">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>*&amp;<sp/>vector)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>*vector);<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_f_vector2_1ade3fc205d2fd29181ad5580c1b40e90e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1ade3fc205d2fd29181ad5580c1b40e90e" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(&amp;<ref refid="class_f_vector2_1a4149790b0bcdb391bc575cd008df9bdb" kindref="member">X</ref><sp/>+<sp/>index);<sp/>}</highlight><highlight class="comment">//For<sp/>R-values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="class_f_vector2_1aaf717afd19889d9f9594453ca6314bb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/><ref refid="class_f_vector2_1ade3fc205d2fd29181ad5580c1b40e90e" kindref="member">operator[] </ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">*(&amp;<ref refid="class_f_vector2_1a4149790b0bcdb391bc575cd008df9bdb" kindref="member">X</ref><sp/>+<sp/>index);<sp/>}</highlight><highlight class="comment">//For<sp/>L-Values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="class_f_vector2_1a6a3144d338caa87539e964cf6675941f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="class_f_vector2_1a4149790b0bcdb391bc575cd008df9bdb" kindref="member">X</ref>);<sp/>}</highlight><highlight class="comment">//For<sp/>R-Values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_f_vector2_1ae98c74989c197cf05da3c8517fb09c7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="class_f_vector2_1a4149790b0bcdb391bc575cd008df9bdb" kindref="member">X</ref>);<sp/>}</highlight><highlight class="comment">//For<sp/>L-Values</highlight></codeline>
<codeline lineno="75"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//Returns<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>Vector<sp/>(or<sp/>Vector&apos;s<sp/>scalar<sp/>lenght)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a2c640688f60435c7e80f834307017b92" kindref="member">Length</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>angle<sp/>between<sp/>this<sp/>vector<sp/>and<sp/>another<sp/>given<sp/>vector<sp/>in<sp/>degrees.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1ac3788d95f355afa04e251818509e45ad" kindref="member">GetAngle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inRadians<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84" refid="class_f_vector2_1ac357b215f5c0cf010caf657134d05b38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1ac357b215f5c0cf010caf657134d05b38" kindref="member">GetAngle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>*&amp;<sp/>vector,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inRadians<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1ac357b215f5c0cf010caf657134d05b38" kindref="member">GetAngle</ref>(*vector,<sp/>inRadians);<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>cross<sp/>product<sp/>between<sp/>this<sp/>vector<sp/>and<sp/>another<sp/>given<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a2f33fed26cfb94257108083fe231c4c9" kindref="member">CrossProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector);</highlight></codeline>
<codeline lineno="88" refid="class_f_vector2_1a3a98aaa6684433c7b4564bb1b9bcb73a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a3a98aaa6684433c7b4564bb1b9bcb73a" kindref="member">CrossProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>*&amp;<sp/>vector)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a3a98aaa6684433c7b4564bb1b9bcb73a" kindref="member">CrossProduct</ref>(*vector);<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Gets<sp/>the<sp/>normalized<sp/>form<sp/>of<sp/>this<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Does<sp/>not<sp/>alter<sp/>teh<sp/>vector<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a4c7059c008b17897bc7b6a0318027430" kindref="member">GetNormal</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Divides<sp/>the<sp/>vector<sp/>by<sp/>its<sp/>Magnitude<sp/>to<sp/>set<sp/>it<sp/>to<sp/>the<sp/>normalized<sp/>unit<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1aa741afade5759780633169be5a371e32" kindref="member">Normalize</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Rotates<sp/>the<sp/>vector<sp/>by<sp/>a<sp/>given<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>second<sp/>parameter<sp/>to<sp/>true<sp/>to<sp/>pass<sp/>angle<sp/>value<sp/>in<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1af639943c2f188d93da0c18a94d22314f" kindref="member">Rotate</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRadian<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>2D<sp/>vector<sp/>that<sp/>points<sp/>at<sp/>a<sp/>given<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>second<sp/>parameter<sp/>to<sp/>true<sp/>to<sp/>pass<sp/>angle<sp/>value<sp/>in<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/><ref refid="class_f_vector2_1a2d3ad0f88a4fa098f672900f3e65d1df" kindref="member">GetVectorByAngle</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isRadian<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1ace95e25a6a1965a3dafdb6695414d1f3" kindref="member">GetDistance</ref>(<ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1ace95e25a6a1965a3dafdb6695414d1f3" kindref="member">GetDistance</ref>(<ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/>vector1,<sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref><sp/>vector2);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2_1a48290a48a92c005598f4da3ac5e6c3f8" kindref="member">Print</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="struct_h_a_s_h___f_vector2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_h_a_s_h___f_vector2" kindref="compound">HASH_FVector2</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_h_a_s_h___f_vector2_1ac80c982f6c3a28c0e0fa272cdbb967b0" kindref="member">operator() </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_f_vector2" kindref="compound">FVector2</ref>&amp;<sp/>vector)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Math/FVector2.h"/>
  </compounddef>
</doxygen>
