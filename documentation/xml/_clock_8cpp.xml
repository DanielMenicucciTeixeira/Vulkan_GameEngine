<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_clock_8cpp" kind="file" language="C++">
    <compoundname>Clock.cpp</compoundname>
    <includes refid="_clock_8h" local="yes">Clock.h</includes>
    <includes refid="_object_8h" local="yes">Objects/Object.h</includes>
    <incdepgraph>
      <node id="1">
        <label>C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Core/Clock.cpp</label>
        <link refid="_clock_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Clock.h</label>
        <link refid="_clock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Objects/Object.h</label>
        <link refid="_object_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>chrono</label>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="6">
        <label>set</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_clock_8h" kindref="compound">Clock.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_object_8h" kindref="compound">Objects/Object.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="class_clock_1a9a9298931a879248ff0c80774bdbd690" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_clock_1a9a9298931a879248ff0c80774bdbd690" kindref="member">Clock::GetInstantDeltaTimeMilliseconds</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="6"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration&lt;float,<sp/>std::chrono::milliseconds::period&gt;(std::chrono::high_resolution_clock::now()<sp/>-<sp/><ref refid="class_clock_1ab45e5173a0bd964e4a4841753d0ae053" kindref="member">CurrentTime</ref>).count();</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_clock_1a9e055f2c0d33e4bc6225bcac380210f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_clock_1a9e055f2c0d33e4bc6225bcac380210f7" kindref="member">Clock::StartClock</ref>()</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_clock_1acfaac49ff48312f23334dbbc9fdcbfc9" kindref="member">StartTime</ref><sp/>=<sp/><ref refid="class_clock_1aa9bebe2035a9dc3286f8db3e02eefb15" kindref="member">PreviousTime</ref><sp/>=<sp/><ref refid="class_clock_1ab45e5173a0bd964e4a4841753d0ae053" kindref="member">CurrentTime</ref><sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14" refid="class_clock_1aedc84ea7f5bd40489e851122f94b6ea0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_clock_1aedc84ea7f5bd40489e851122f94b6ea0" kindref="member">Clock::UpdateClock</ref>()</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_clock_1aa9bebe2035a9dc3286f8db3e02eefb15" kindref="member">PreviousTime</ref><sp/>=<sp/><ref refid="class_clock_1ab45e5173a0bd964e4a4841753d0ae053" kindref="member">CurrentTime</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_clock_1ab45e5173a0bd964e4a4841753d0ae053" kindref="member">CurrentTime</ref><sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_clock_1a69eb0ee1c05df4817e632b63ac5241ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_clock_1a69eb0ee1c05df4817e632b63ac5241ca" kindref="member">Clock::GetSleepTime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>framesPerSecond)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="21"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>millisecondsPerFrame<sp/>=<sp/><ref refid="_clock_8h_1a5ecf7bdf749a33cada374356691a52c8" kindref="member">MILLISECONDS_TO_SECONDS</ref><sp/>/<sp/>framesPerSecond;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(millisecondsPerFrame<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sleepTime<sp/>=<sp/>millisecondsPerFrame<sp/>-<sp/><ref refid="class_clock_1a9a9298931a879248ff0c80774bdbd690" kindref="member">GetInstantDeltaTimeMilliseconds</ref>();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sleepTime<sp/>&lt;<sp/>millisecondsPerFrame<sp/>?<sp/>sleepTime<sp/>:<sp/>millisecondsPerFrame;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_clock_1adb033f86dcc6dfd56099a936cbfcd345" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_clock_1adb033f86dcc6dfd56099a936cbfcd345" kindref="member">Clock::GetDeltaTimeSeconds</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="33"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration&lt;float,<sp/>std::chrono::seconds::period&gt;(<ref refid="class_clock_1ab45e5173a0bd964e4a4841753d0ae053" kindref="member">CurrentTime</ref><sp/>-<sp/><ref refid="class_clock_1aa9bebe2035a9dc3286f8db3e02eefb15" kindref="member">PreviousTime</ref>).count();</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_clock_1a16be5dd6a8ee4323cdc0cdf8fc1269b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_clock_1a16be5dd6a8ee4323cdc0cdf8fc1269b5" kindref="member">Clock::GetDeltaTimeMiliSecods</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="38"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration&lt;float,<sp/>std::chrono::milliseconds::period&gt;(<ref refid="class_clock_1ab45e5173a0bd964e4a4841753d0ae053" kindref="member">CurrentTime</ref><sp/>-<sp/><ref refid="class_clock_1aa9bebe2035a9dc3286f8db3e02eefb15" kindref="member">PreviousTime</ref>).count();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_clock_1a8ce163241d31f1edb9f7febd161bb821" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_clock_1a8ce163241d31f1edb9f7febd161bb821" kindref="member">Clock::GetTimeSeconds</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="43"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration&lt;float,<sp/>std::chrono::seconds::period&gt;(<ref refid="class_clock_1ab45e5173a0bd964e4a4841753d0ae053" kindref="member">CurrentTime</ref><sp/>-<sp/><ref refid="class_clock_1acfaac49ff48312f23334dbbc9fdcbfc9" kindref="member">StartTime</ref>).count();</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_clock_1adbc370eb6b5f8d01645cf440188160a8" refkind="member"><highlight class="normal"><ref refid="class_clock_1adbc370eb6b5f8d01645cf440188160a8" kindref="member">Clock::Clock</ref>()</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_clock_1afc976ce68fa85e15cc06f9ed47bddb7c" refkind="member"><highlight class="normal"><ref refid="class_clock_1afc976ce68fa85e15cc06f9ed47bddb7c" kindref="member">Clock::~Clock</ref>()</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Dev/Vulkan_Engine/Vulkan_GameEngine/Engine/Core/Clock.cpp"/>
  </compounddef>
</doxygen>
